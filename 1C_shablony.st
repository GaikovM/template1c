{1,
{17,
{"NGoncharow",1,0,"",""},
{13,
{"Управляющие",1,0,"",""},
{0,
{"цс    Цикл для Счетчика",0,0,"цс","<?""Имя Счетчика?""> = 0;
Пока <?""Имя Счетчика?""> < <?""Имя переменной числа итераций?""> Цикл
	<?""Имя Счетчика?""> = <?""Имя Счетчика?""> + 1;
	<?>
КонецЦикла;   //по <?""Имя Счетчика?""> < <?""Имя переменной числа итераций?"">"}
},
{0,
{"?",0,0,"?(","?(<?>, ""Ложь"",  ""Истина""))
"}
},
{0,
{"Если",0,0,"Если","Если <?> Тогда
	
КонецЕсли;"}
},
{0,
{"Пока",0,0,"Пока","Пока <?> Цикл
		
КонецЦикла;"}
},
{0,
{"Для",0,0,"Для","Для <?> По  Цикл
	
КонецЦикла;"}
},
{0,
{"Для каждого",0,0,"Для[ Каждого]","Для каждого <?> Из  Цикл
	
КонецЦикла;"}
},
{0,
{"Попытка",0,0,"Попы[тка]","Попытка
	<?>
Исключение
    //ОписаниеОшибки()
КонецПопытки;"}
},
{0,
{"Конец Цикла",0,0,"Коне[цЦикл]а","КонецЦикла;"}
},
{0,
{"ИначеЕсли",0,0,"ИначеЕсли","ИначеЕсли <?> Тогда"}
},
{0,
{"Прервать",0,0,"Пре[рват]ь","Прервать;<?>"}
},
{0,
{"Конец если",0,0,"Коне[цЕсл]и","КонецЕсли;"}
},
{7,
{"Процедура",1,0,"",""},
{0,
{"Процедура НаКлиенте",0,0,"Проц[едура]","&НаКлиенте
Процедура <?>()
	
КонецПроцедуры
"}
},
{0,
{"Процедура НаСервереБезКонтекста",0,0,"Проц[едура]","&НаСервереБезКонтекста
Процедура <?>()

КонецПроцедуры"}
},
{0,
{"Процедура НаСервере",0,0,"Проц[едура]","&НаСервере
Процедура <?>()
	
КонецПроцедуры
"}
},
{0,
{"Процедура НаКлиентеНаСервереБезКонтекста (только модули упр.форм)",0,0,"Проц[едура]","&НаКлиентеНаСервереБезКонтекста
Процедура <?>()
	
КонецПроцедуры
"}
},
{0,
{"Процедура НаКлиентеНаСервере (только модули команд)",0,0,"Проц[едура]","&НаКлиентеНаСервере
Процедура <?>()
	
КонецПроцедуры
"}
},
{0,
{"Процедура",0,0,"Проц[едура]","Процедура <?>()
		
КонецПроцедуры
"}
},
{0,
{"Процедура с заголовком",0,0,"Процедура","Процедура <?""Введите имя процедуры"">()
    <?>
КонецПроцедуры //<?""Введите имя процедуры"">

"}
}
},
{7,
{"Функция",1,0,"",""},
{0,
{"Функция НаКлиенте",0,0,"Функ[ция]","&НаКлиенте
Функция <?>()
	
КонецФункции
"}
},
{0,
{"Функция НаСервереБезКонтекста",0,0,"Функ[ция]","&НаСервереБезКонтекста
Функция <?>()
	
КонецФункции
"}
},
{0,
{"Функция НаСервере",0,0,"Функ[ция]","&НаСервере
Функция <?>()
	
КонецФункции
"}
},
{0,
{"Функция НаКлиентеНаСервереБезКонтекста (только модули упр.форм)",0,0,"Функ[ция]","&НаКлиентеНаСервереБезКонтекста
Функция <?>()
	
КонецФункции"}
},
{0,
{"Функция НаКлиентеНаСервере (только модули команд)",0,0,"Функ[ция]","&НаКлиентеНаСервере
Функция <?>()
	
КонецФункции"}
},
{0,
{"кф		КонецФункции",0,0,"кф","	<?>
КонецФункции"}
},
{0,
{"ф		Функция",0,0,"ф","Функция <?""Имя функции?"">(<?>) //Экспорт
	//Результат<?""Имя функции?"">= ;
	Возврат Результат<?""Имя функции?"">;
КонецФункции //<?""Имя функции?"">"}
}
}
},
{15,
{"Прикладные",1,0,"",""},
{0,
{"Значение перечисления",0,0,"Переч[исления.]","Перечисления.<?"""", ЗначениеПеречисления>"}
},
{0,
{"Движение",0,0,"Движение=","Движение = Движения<?>"}
},
{0,
{"Граница",0,0,"Граница=","Граница = Новый Граница(<?>, <?"""", ВыборВарианта, ""ВидГраницы.Включая"", ""ВидГраницы.Включая"", ""ВидГраницы.Исключая"", ""ВидГраницы.Исключая"">);"}
},
{1,
{"ЗУП",1,0,"",""},
{0,
{"ПАДЕЖ КРОХОТУЛЬКА",0,0,"","// (c) Jurer Production Begin ( Start )
// В случае, если программа окажется для Вас полезной, и Вы представляете только свои интересы, а не интересы фирмы,
// автор будет весьма признателен, если Вы перечислите ему, то есть мне, некую сумму на Ваше усмотрение
// Счет для я-деньги: 4100131343416 - будьте ж несдержаней в своих инициативах
// 
// http://superjur.narod.ru
// 
// Удаление этих строк незнаконно!
// Гарантия 91 года и 1 месяц!!!
// Послегарантийное обслуживание - бесплатно!!!
// Круглосуточная поддержка - все 48 часов в бою!
// Ссылка на источник обязательна!
// Эти программы защищены законом об авторских правах. Запрещается перепродажа данной программы. Продажа тоже запрещена.
// ПРОВЕРЕНО! ВИРУСОВ НЕТ!!! АНТИВИРУСОВ ТОЖЕ!!!
// Смотри Милячуша в творительном !!
// скупой слепой тупой - пропой!!
// !№№!
// !57! поправки для творительного падежа на -ин -ов окончание -ым, -ич -ыш окончание -ем, иначе -ом
// !56! укратил
// !55! ПадежЫ - для оглы и кызы
// !54! 
// !53! Очередное сокращение кода
// !51! Прегромадное спасибо Олегу Дубровскому за оказанную моральную, информационную и материальную поддержку сего проекта.
//      Сергею Толкачёву за напоминание о том, что в русском языке всегда есть место исключениям!
// !50! П:Ответственный за электрохозяйство  Ф:Ацута Груша  
// !48! исправлена ошибка при склонении фамилий (спасибо, Mario).
// !47! исправлена ошибка при склонении профессий ( спасибо, Павел Ковалев).
// !46! оптимизация + четвертый параметр задает, что вернуть - фамилия, имя или отчество или всё сразу в нужном падеже
// !42! Осел + Соловей + Воробей + Немец + Кормилец + Силиец
// !41! отчества оканчивающиеся на ""ы"" считаются женскими ?
// Функция для склонения одного слова!!!
// z1 - само слово
// z2 - номер падежа
// z3 - пол
// z4 - 1-склонять как фамилию, 2-имя, 3-отчество
Функция ПадежС(z1,Знач z2=2,Знач z3=""*"",z4=0) Экспорт
  z5=Найти(z1,""-"");
  z6=?(z5=0,"""",""-""+ПадежС(Сред(z1,z5+1,СтрДлина(z1)-z5+1),z2,z3,z4));
  z1=НРег(?(z5=0,z1,Лев(z1,z5-1)));
  z7=Прав(z1,3);z8=Прав(z7,2);z9=Прав(z8,1);
  z5=СтрДлина(z1);
  za=Найти(""ая ия ел ок яц ий па да ца ша ба та га ка"",z8);
  zb=Найти(""аеёийоуэюяжнгхкчшщ"",Лев(z7,1));
  zc=Макс(z2,-z2);
  zd=?(za=4,5,Найти(""айяь"",z9));
  zd=?((zc=1)или(z9=""."")или((z4=2)и(Найти(""оиеу""+?(z3=""ч"","""",""бвгджзклмнпрстфхцчшщъ""),z9)>0))или((z4=1)и(Найти(""мия мяэ лия кия жая лея"",z7)>0)),9,?((zd=4)и(z3=""ч""),2,?(z4=1,?(Найти(""оеиую"",z9)+Найти(""их ых аа еа ёа иа оа уа ыа эа юа яа"",z8)>0,9,?(z3<>""ч"",?(za=1,7,?(z9=""а"",?(za>18,1,6),9)),?(((Найти(""ой ый"",z8)>0)и(z5>4)и(Найти(""опой вбой"",Прав(z1,4))=0))или((zb>10)и(za=16)),8,zd))),zd)));
  ze=Найти(""лец нёк вей бей дец пец мец нец рец вец аец иец ыец бер"",z7);
  zf=?((zd=8)и(zc<>5),?((zb>15)или(Найти(""жий ний"",z7)>0),""е"",""о""),?(z1=""лев"",""ьв"",?((Найти(""аеёийоуэюя"",Сред(z1,z5-3 ,1))=0)и((zb>11)или(zb=0))и(ze<>49),"""",?(za=7,""л"",?(za=10,""к"",?(za=13,""йц"",?(ze=0,"""",?(ze<16,""ь""+?(ze=1,""ц"",?(ze=5,""к"","""")),?(ze<41,""ц"",?(ze<53,""йц"",""р""))))))))));
  zf=?((zd=9)или((z4=3)и(Прав(z1,1)=""ы"")),z1,Лев(z1,z5-?((zd>6)или(zf<>""""),2,?(zd>0,1,0)))+zf+СокрП(Сред(""а у а ""+?((z8=""ич"")или(z8=""ыш""),""е"",?((z8=""ов"")or(z8=""ин""),""ы"",""о""))+""ме ""+?(Найти(""гжкхш"",Лев(z8,1))>0,""и"",""ы"")+"" е у ойе я ю я ем""+?(za=16,""и"",""е"")+"" и е ю ейе и и ь ьюи и и ю ейи ойойу ойойойойуюойойгомуго""+?((zf=""е"")или(za=16)или((zb>12)и(zb<16)),""и"",""ы"")+""мм"",10*zd+2*zc-3,2)));
Возврат ?(""""=z1,"""",?(z4>0,ВРег(Лев(zf,1))+?((z2<0)и(z4>1),""."",Сред(zf,2)),zf)+z6);
КонецФункции
//_____________________________________________________________________________
// z1 - фамилия имя отчество например Железняков Юрий Юрьевич
// z2 - Падеж ( по  умолчанию = 2 - родительный)
// 2 - родительный  ( нет кого?    ) Железнякова Юрия Юрьевича     
// 3 - дательный    ( кому?        ) Железнякову Юрию Юрьевичу 
// 4 - винительный  ( вижу кого?   ) Железнякова Юрия Юрьевича  
// 5 - творительный ( кем?         ) Железняковым Юрием Юрьевичем    
// 6 - предложный   ( о ком?       ) Железнякове Юрии Юрьевиче 
// Если задать Z2 меньше 0, то на выходе получим от -1=Железняков Ю. Ю. до -6=Железнякове Ю. Ю.
// z3 - параметр Пол может не указываться, но при наличии фамилий с 
// инициалами точное определение пола невозможно, поэтому предлагается задавать пол этим
// параметром  1 - мужской 2 - женский  
// ДЛЯ СКЛОНЕНИЯ ПРОФЕССИЙ ИСПОЛЬЗУЙТЕ ФУНКЦИЮ ПАДЕЖП И БУДЕТ ВАМ СЧАСТЬЕ!
// ---------------------------------------------------------------------------------------
// Бибик Галушка Цой Николайчик Наталия Петровна Герценберг Кривошей Капица-Метелица
// Если Падеж(Фио ,1 ,3),       то на выходе получим Фамилия Имя Отчество и т.д.
// Если Падеж(Фио ,1 ,3,""1"" ),  то                   Фамилия 
// Если Падеж(Фио ,1 ,3,""2"" ),  то                   Имя 
// Если Падеж(Фио ,1 ,3,""3"" ),  то                   Отчество 
// Если Падеж(Фио, 1 ,3,""12"" ), то                   Фамилия Имя 
// Если Падеж(Фио, 1 ,3,""23"" ), то                   Имя Отчество 
// Если Падеж(Фио,-1 ,3,""231"" ),то                   И. О. Фамилия 
// Если Падеж(Фио,-1 ,3,""23"" ), то                   И. О.  
// 10-11-2003 3-20
Функция Падеж(z1,z2=2,z3=3,z4=""123"",z5=1) Экспорт
	z6=Нрег(Прав(СокрП(z1),4));
	z7=Прав(z6,1);
  Возврат?(z5<4,Падеж(СокрЛП(СтрЗаменить(Сред(z1,Найти(z1+"" "","" "")+1),""."","". "")),z2,z3,СтрЗаменить(z4,z5,ПадежС(?((z5=3)и(z7=""ы""),z1,Лев(z1,Найти(z1+"" "","" "")-1)),z2,Сред(""ча""+z7,?(z3=3,?(z6=""оглы"",1,?(z6=""кызы"",1,3)),z3),1),z5)+"" ""),z5+1),z4);
КонецФункции

Функция ПадежП(Знач z1,Знач z2,z3=0) Экспорт
  z1=СокрЛП(z1);z4=Найти(z1+"" "","" "")+1;z5=Лев(z1,z4-2);z6=Прав(z5,2);
  z7=?((Найти(""ая ий ый"",z6)>0)и(Найти(""ющий нный"",Сред(z1,z4-5,4))=0)и(z3=0),""1"",""*"");
Возврат НРег(?((z6=""ая"")или(Прав(z6,1)=""а""),ПадежС(z5,z2,z7,1)+"" ""+ПадежС(Сред(z1,z4),z2),ПадежС(z5,z2,""ч"",1)+?((z6=""ий"")и(Найти(z1,"" "")=0),"""","" ""+?(z7=""1"",ПадежП(Сред(z1,z4),z2,Число(z7)),Сред(z1,z4)))));
КонецФункции



//=== КОНЕЦ ПАДЕЖА КРОХОТУЛЬКА ===
"}
}
},
{1,
{"БУ",1,0,"",""},
{0,
{"Получить субконто счета",0,0,"Получить субконто счета","ЧислоАктивныхСубконто = Счет.ВидыСубконто.Количество();
Для Сч = 1 По ЧислоАктивныхСубконто Цикл
ТипСубк = Счет.ВидыСубконто[Сч - 1].ВидСубконто.ТипЗначения;
КонецЦикла; "}
}
},
{3,
{"Константы",1,0,"",""},
{0,
{"Получить/установить",0,0,"Конст[анты]","Константы.<?"""", Константа>.<?""Выбор метода"", ВыборВарианта, ""Получить"", ""Получить"", ""Установить"", ""Установить"">()"}
},
{0,
{"Установить",0,0,"","Константы.<?"""", Константа>.Установить(<?>);"}
},
{0,
{"Получить",0,0,"","Константы.<?"""", Константа>.Получить()"}
}
},
{3,
{"Справочники",1,0,"",""},
{0,
{"НайтиСоздатьСправочник",0,0,"","// Находит или создает группу с заданными параметрами
//
// Параметры
//  Код,Наименование
//	ВидСправочника - строковое описание вида,ЭтоГруппа=Ложь - флажок группы
//
// Возвращаемое значение:
//   Ссылка на элемент или группу
//
Функция НайтиСоздатьСправочник(Код,Наименование,ВидСправочника,ЭтоГруппа=Ложь)
	СпрСсылка = Справочники[ВидСправочника].НайтиПоКоду(Код);
	
	Если СпрСсылка = Неопределено Тогда
	
		Сообщить(""Не задан код для поиска или создания справочника ""+ВидСправочника);
		Возврат Неопределено;
	
	КонецЕсли;
	
	Если СпрСсылка.Пустая() Тогда
	
		СпрОбъект = ?(ЭтоГруппа,Справочники[ВидСправочника].СоздатьГруппу(),Справочники[ВидСправочника].СоздатьЭлемент());
		СпрОбъект.Код = Код;
		СпрОбъект.Наименование = Наименование;
		СпрОбъект.Записать();
		Возврат СпрОбъект.Ссылка;
		
	Иначе
		
		Возврат СпрСсылка;
		
	КонецЕсли;
КонецФункции // НайтиСоздатьСправочник()"}
},
{0,
{"Обход элементов",0,0,"","Выборка = Справочники.<?"""", Справочник>.Выбрать(); 
Пока Выборка.Следующий() Цикл
	<?>
КонецЦикла; //выборка по <?"""", Справочник>"}
},
{0,
{"Обход элементов иерархически",0,0,"","Выборка = Справочники.<?"""", Справочник>.ВыбратьИерархически();  
Пока Выборка.Следующий() Цикл
	<?>
КонецЦикла; //иерарх по <?"""", Справочник>"}
}
},
{3,
{"Документы",1,0,"",""},
{0,
{"НайтиСоздатьДокумент",0,0,"","// Находит или создает новый документ Партия (ручной
//
// Параметры
//  Дата партии
//  ВидПриходногоДокумента="""", НомерПриходногоДокумента="""" - для поиска имеющихся документов в рабочем периоде
// Возвращаемое значение:
//   Ссылка на документ Партия
//
Функция НайтиСоздатьДокументПартии(Дата, ВидПриходногоДокумента="""", НомерПриходногоДокумента="""")
	
	СтруктураСубконтоПартии=Новый Структура();
	СтруктураСубконтоПартии.Вставить(""ВидСубконто"",ВидСубконтоПартии);
	
	Если ВидПриходногоДокумента<>"""" Тогда // Поиск приходных документов в рабочем периоде
		Попытка
			Партия = Документы[СоответствиеВидовДокументов[ВидПриходногоДокумента].ВидДокумента].НайтиПоНомеру(СоответствиеВидовДокументов[ВидПриходногоДокумента].Префикс+(НомерПриходногоДокумента), Дата);
			Если Партия=Неопределено Тогда
				Сообщить(""Не задан номер документа партии: ""+ Дата + ВидПриходногоДокумента+НомерПриходногоДокумента + Символы.ПС + "" Будет создан документ Партия (ручной)"", СтатусСообщения.ОченьВажное);
			ИначеЕсли Партия.Пустая() Тогда
				Сообщить(""Не найден документ партии с заданным номером: ""+ Дата + ВидПриходногоДокумента+НомерПриходногоДокумента + Символы.ПС + "" Будет создан документ Партия (ручной)"", СтатусСообщения.ОченьВажное);
			КонецЕсли;
		Исключение
			Сообщить(""Ошибка при поиске партии: ""+ Дата + ВидПриходногоДокумента+НомерПриходногоДокумента + Символы.ПС + "" Будет создан документ Партия (ручной)"", СтатусСообщения.ОченьВажное);
		КонецПопытки;
	Иначе
		//Сообщить(""Не задан вид документа партии: ""+ Дата + ВидПриходногоДокумента+НомерПриходногоДокумента + Символы.ПС + "" Будет создан документ Партия (ручной)"", СтатусСообщения.ОченьВажное);
	КонецЕсли;
	Если ЗначениеНеЗаполнено(Партия) Тогда
		Выборка = Документы.Партия.Выбрать(НачалоДня(Дата),КонецДня(Дата));
		Если Выборка.Следующий() Тогда
			Партия = Выборка.Ссылка;
		Иначе
			Партия = Документы.Партия.СоздатьДокумент();
			Партия.Дата = Дата;
			Партия.УстановитьНовыйНомер();
			Партия.ВалютаДокумента = Руб;
			Партия.Записать();
		КонецЕсли; 
	КонецЕсли;
	СтруктураСубконтоПартии.Вставить(""Значение"",Партия.Ссылка); 
	Возврат СтруктураСубконтоПартии
	
КонецФункции // НайтиСоздатьДокументПартии()
"}
},
{0,
{"Обход документов",0,0,"","Выборка = Документы.<?"""", Документ>.Выбрать();   
Пока Выборка.Следующий() Цикл
	<?>
КонецЦикла; //выборка по <?"""", Документ>"}
},
{0,
{"Движения",0,0,"","Движения.<?""Выбор регистра"", ОбъектМетаданных, ""РегистрСведений"", ""РегистрНакопления"", ""РегистрБухгалтерии"", ""РегистрРасчета"">"}
}
},
{1,
{"Отчеты",1,0,"",""},
{0,
{"Открыть отчет",0,0,"","Отчеты.<?"""", Отчет>.ПолучитьФорму().Открыть();"}
}
},
{1,
{"Обработки",1,0,"",""},
{0,
{"Открыть обработку",0,0,"","Обработки.<?"""", Обработка>.ПолучитьФорму().Открыть();"}
}
},
{1,
{"Планы видов характеристик",1,0,"",""},
{0,
{"Обход видов характеристик",0,0,"","Выборка = ПланыВидовХарактеристик.<?"""", ПланВидовХарактеристик>.Выбрать();

Пока Выборка.Следующий() Цикл

	<?>

КонецЦикла;"}
}
},
{1,
{"Планы счетов",1,0,"",""},
{0,
{"Найти по коду",0,0,"","ПланыСчетов.<?"""", ПланСчетов>.НайтиПоКоду(<?>)"}
}
},
{1,
{"Планы видов расчета",1,0,"",""},
{0,
{"Обход видов расчета",0,0,"","Выборка = ПланыВидовРасчета.<?"""", ПланВидовРасчета>.Выбрать(); 
Пока Выборка.Следующий() Цикл
	<?>
КонецЦикла;"}
}
},
{1,
{"Бизнес-процессы",1,0,"",""},
{0,
{"Обход бизнес-процессов",0,0,"","Выборка = БизнесПроцессы.<?"""", БизнесПроцесс>.Выбрать();

Пока Выборка.Следующий() Цикл

	<?>

КонецЦикла;"}
}
},
{1,
{"Задачи",1,0,"",""},
{0,
{"Обход задач",0,0,"","Выборка = Задачи.<?"""", Задача>.Выбрать();

Пока Выборка.Следующий() Цикл

	<?>

КонецЦикла;"}
}
}
},
{7,
{"Коллекции значений",1,0,"",""},
{0,
{"ТЗ",0,0,"ТЗ=","ТЗ = Новый ТаблицаЗначений;
<?>"}
},
{0,
{"СЗ",0,0,"СЗ=","СЗ = Новый СписокЗначений;
<?>"}
},
{0,
{"Структура",0,0,"Структура=","Структура = Новый Структура;
<?>"}
},
{0,
{"Соответствие",0,0,"Соответствие=","Соответствие = Новый Соответствие;
<?>"}
},
{0,
{"ДеревоЗначений",0,0,"ДеревоЗначений=","ДеревоЗначений = Новый ДеревоЗначений;
<?>"}
},
{0,
{"Массив",0,0,"Массив=","Массив = Новый Массив(<?>);"}
},
{0,
{"УдалитьСтрокуТЗ",0,0,""," Сч = 0;
    Пока Сч < ТаблицаПоРазмещению.Количество() Цикл
        СтрокаТаблицы = ТаблицаПоРазмещению.Получить(Сч);
        Если СтрокаТаблицы.КоличествоПоРазмещению = 1 Тогда
            ТаблицаПоРазмещению.Удалить(СтрокаТаблицы);
        Иначе
            Сч = Сч + 1;
        КонецЕсли;
    КонецЦикла;"}
}
},
{6,
{"Запросы",1,0,"",""},
{0,
{"день без времени",0,0,"","НАЧАЛОПЕРИОДА(что-то-там, ДЕНЬ) КАК Дата"}
},
{0,
{"Таблица дат",0,0,"","


//****************************************************
""ВЫБРАТЬ
|	0 КАК Цифра
|ПОМЕСТИТЬ ТабЦифр
|
|ОБЪЕДИНИТЬ
|
|ВЫБРАТЬ
|	1
|
|ОБЪЕДИНИТЬ
|
|ВЫБРАТЬ
|	2
|
|ОБЪЕДИНИТЬ
|
|ВЫБРАТЬ
|	3
|
|ОБЪЕДИНИТЬ
|
|ВЫБРАТЬ
|	4
|
|ОБЪЕДИНИТЬ
|
|ВЫБРАТЬ
|	5
|
|ОБЪЕДИНИТЬ
|
|ВЫБРАТЬ
|	6
|
|ОБЪЕДИНИТЬ
|
|ВЫБРАТЬ
|	7
|
|ОБЪЕДИНИТЬ
|
|ВЫБРАТЬ
|	8
|
|ОБЪЕДИНИТЬ
|
|ВЫБРАТЬ
|	9
|;
|
|////////////////////////////////////////////////////////////////////////////////
|ВЫБРАТЬ
|	ДОБАВИТЬКДАТЕ(&ДатаНачала, ДЕНЬ, ТабЦифр1.Цифра + 10 * ТабЦифр2.Цифра + 100 * ТабЦифр3.Цифра + 1000 * ТабЦифр4.Цифра) КАК День
|ПОМЕСТИТЬ ТабДней
|ИЗ
|	ТабЦифр КАК ТабЦифр1,
|	ТабЦифр КАК ТабЦифр2,
|	ТабЦифр КАК ТабЦифр3,
|	ТабЦифр КАК ТабЦифр4
|ГДЕ
|	ДОБАВИТЬКДАТЕ(&ДатаНачала, ДЕНЬ, ТабЦифр1.Цифра + 10 * ТабЦифр2.Цифра + 100 * ТабЦифр3.Цифра + 1000 * ТабЦифр4.Цифра) <= &ДатаКонца
|
|ИНДЕКСИРОВАТЬ ПО
|	День
|;
|
|////////////////////////////////////////////////////////////////////////////////
|ВЫБРАТЬ
|	ТабДней.День
|ИЗ
|	ТабДней КАК ТабДней""
//*********************************************************************************************************
Таблица дат
////////////////////////////////---------***********************************************вариант 2
	ВЫБРАТЬ
		0 КАК Цифра
ПОМЕСТИТЬ ВТ_Цифра

ОБЪЕДИНИТЬ ВСЕ

ВЫБРАТЬ
	1

ОБЪЕДИНИТЬ ВСЕ

ВЫБРАТЬ
	2

ОБЪЕДИНИТЬ ВСЕ

ВЫБРАТЬ
	3

ОБЪЕДИНИТЬ ВСЕ

ВЫБРАТЬ
	4

ОБЪЕДИНИТЬ ВСЕ

ВЫБРАТЬ
	5

ОБЪЕДИНИТЬ ВСЕ

ВЫБРАТЬ
	6

ОБЪЕДИНИТЬ ВСЕ

ВЫБРАТЬ
	7

ОБЪЕДИНИТЬ ВСЕ

ВЫБРАТЬ
	8

ОБЪЕДИНИТЬ ВСЕ

ВЫБРАТЬ
	9
;

////////////////////////////////////////////////////////////////////////////////
ВЫБРАТЬ
	ВТ_Цифра.Цифра + 10 * ВТ_Цифра1.Цифра КАК Поле1,
	ДОБАВИТЬКДАТЕ(&Дата1, ДЕНЬ, ВТ_Цифра.Цифра + 10 * ВТ_Цифра1.Цифра) КАК Поле2
ИЗ
	ВТ_Цифра КАК ВТ_Цифра
		ПОЛНОЕ СОЕДИНЕНИЕ ВТ_Цифра КАК ВТ_Цифра1
		ПО (ИСТИНА)
ГДЕ
	ДОБАВИТЬКДАТЕ(&Дата1, ДЕНЬ, ВТ_Цифра.Цифра + 10 * ВТ_Цифра1.Цифра) МЕЖДУ &Дата1 И &Дата2

УПОРЯДОЧИТЬ ПО
	Поле1
///////////////////////////////////////////---------------------****************************



Универсальная функция получения таблицы дат за период

// Возвращает таблицу значений с датами за период
//
// Параметры:
//  НачДата  - Дата - Начало периода
//  КонДата  - Дата - Конец периода
//  Интервал - Строка - одно из следующих значений:
//             (Секунда, Минута, Час, День, Неделя, Месяц, Квартал, Полугодие, Год)
//
// Возвращаемое значение:
//   Таблица значений с датами за период. Содержит одну колонку ""НачИнтервала""
//
Функция ПолучитьТаблицуДатЗаПериод(НачДата, КонДата, Интервал)

    тзИнтервалов = Новый ТаблицаЗначений;
    тзИнтервалов.Колонки.Добавить(""НачИнтервала"", Новый ОписаниеТипов(""Дата""));

    Запрос = Новый Запрос;
    Запрос.Текст = ""ВЫБРАТЬ
    |   НАЧАЛОПЕРИОДА(&НачДата, День) КАК НачИнтервала
    |УПОРЯДОЧИТЬ ПО
    |   НачИнтервала
    |ИТОГИ ПО
    |   НачИнтервала ПЕРИОДАМИ(""+Интервал+"", &НачДата, &КонДата)"";
    //Параметры запроса
    Запрос.УстановитьПараметр(""НачДата"", НачДата);
    Запрос.УстановитьПараметр(""КонДата"", КонДата);

    Выборка = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, ""НачИнтервала"", ""ВСЕ"");
    Пока Выборка.Следующий() Цикл
        НоваяСтрока = тзИнтервалов.Добавить();
        НоваяСтрока.НачИнтервала = Выборка.НачИнтервала;
    КонецЦикла;

    Возврат  тзИнтервалов;

КонецФункции //ПолучитьТаблицуДатЗаПериод()"}
},
{0,
{"Получение Среза Посл на каждую дату документа",0,0,"","ВЫБРАТЬ
	Заказ.Ссылка,
	Заказ.Валюта,
	максимум(КурсыВалют.Период) как период
	поместить ДокументыЗаказ
ИЗ
	Документ.Заказ КАК Заказ
		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют КАК КурсыВалют
		ПО Заказ.Валюта = КурсыВалют.Валюта
			И Заказ.Дата >= КурсыВалют.Период
			сгруппировать по 
			ссылка,
			заказ.валюта
			;
			выбрать
			*
			из 
			ДокументыЗаказ как ДокументыЗаказ
			Левое соединение
			регистрсведений.курсывалют как курсывалют
			по 
			документыЗаказ.валюта=КурсыВалют.Валюта и
			ДокументыЗаказ.Период=КурсыВалют.Период
			"}
},
{0,
{"НарастающийИтог",0,0,"","ВЫБРАТЬ
	ПоступлениеДенег.Ссылка,
	ПоступлениеДенег.Сумма,
	ПоступлениеДенег.МоментВремени
ПОМЕСТИТЬ Т1
ИЗ
	Документ.ПоступлениеДенег КАК ПоступлениеДенег
ГДЕ
	ПоступлениеДенег.Валюта = &Валюта
;

////////////////////////////////////////////////////////////////////////////////
ВЫБРАТЬ
	Т1.Ссылка,
	Т1.Сумма,
	Т1.МоментВремени,
	СУММА(Т2.Сумма) КАК нарастающийитог

ИЗ
	Т1 КАК Т1
		ЛЕВОЕ СОЕДИНЕНИЕ Т1 КАК Т2
		ПО Т1.МоментВремени >= Т2.МоментВремени

СГРУППИРОВАТЬ ПО
	Т1.Сумма,
	Т1.Ссылка,
	Т1.МоментВремени

УПОРЯДОЧИТЬ ПО
	Т1.МоментВремени"}
},
{0,
{"ДОБАВИТЬКДАТЕ",0,0,"ДОБАВИТЬКДАТЕ","ДОБАВИТЬКДАТЕ(КОНЕЦПЕРИОДА(&Дата, ДЕНЬ), СЕКУНДА, 1)"}
},
{4,
{"Запросы (для вызова из тела запросов)",1,0,"",""},
{0,
{"ВЫБ		ВЫБОР",0,0,"ВЫБ","ВЫБОР КОГДА <?>
	ТОГДА
	ИНАЧЕ
КОНЕЦ"}
},
{0,
{"ВЫР		ВЫРАЗИТЬ КАК СТРОКА",0,0,"ВЫР","ВЫРАЗИТЬ ( <?> КАК СТРОКА (1000))"}
},
{0,
{"ЛвС		ЛЕВОЕ СОЕДИНЕНИЕ",0,0,"ЛвС","ЛЕВОЕ СОЕДИНЕНИЕ"}
},
{0,
{"ПрС		ПРАВОЕ СОЕДИНЕНИЕ",0,0,"ПрС","ПРАВОЕ СОЕДИНЕНИЕ"}
}
}
},
{5,
{"Табличный документ",1,0,"",""},
{0,
{"ТабДок",0,0,"ТабДок=","ТабДок = <?"""", ВыборВарианта, ""ЭлементыФормы.ТабДок"", ""ЭлементыФормы.ТабДок"", ""Новый ТабличныйДокумент"", ""Новый ТабличныйДокумент"">;
<?>"}
},
{0,
{"ПолучитьОбласть",0,0,"Обл=","Обл<?""Название области""> = <?>.ПолучитьОбласть(Обл""<?""Название области"">"");"}
},
{0,
{"Макет",0,0,"Макет=","Макет = ПолучитьМакет(""Макет"");"}
},
{0,
{"Вывод в табличный документ",0,0,"","//Получаем исходный макет
Макет = ПолучитьМакет(""Основной"");       
//Создаем табличный документ для вывода
ТабДок = Новый ТабличныйДокумент();        
//Получаем шапку
Шапка=Макет.ПолучитьОбласть(""Шапка"");     
//Устанавливаем параметры в области шапки
Шапка.Параметры.НачДата=НачДата;
Шапка.Параметры.КонДата=КонДата;
//Выводим шапку
ТабДок.Вывести(Шапка);
//Выводим все строки таблицы значений ТЗ
Для Каждого Стр Из ТЗ Цикл
    //Выбираем, какую строку выводить
    Если СокрЛП(Стр.Статус)=""Ошибка"" Тогда
        Строка=Макет.ПолучитьОбласть(""Ошибка"");
    Иначе
        Строка=Макет.ПолучитьОбласть(""Строка"");
    КонецЕсли;
    //Автоматически заполняем параметры области строки из строки таблицы значений
    Строка.Параметры.Заполнить(Стр);
    //Выводим строку
    ТабДок.Вывести(Строка);
КонецЦикла;
//Показываем табличный документ
ТабДок.Показать();

"}
},
{0,
{"Отбор строк табличной части",0,0,"ОтборСтрок","только для <> УФ

Ключевые слова: отбор, табличная часть, ОтборСтрок


Использовать его очень просто:

//установить отбор
ЭлементыФормы.ИмяТабПоля.ОтборСтрок.Колонка1.Установить(ЗначениеОтбора);

//отключить отбор
ЭлементыФормы.ИмяТабПоля.ОтборСтрок.Колонка1.Установить(,Ложь);

или 2-й вариант:

ЭлементыФормы.ИмяТабПоля.ОтборСтрок.Колонка1.Использование = Истина;
ЭлементыФормы.ИмяТабПоля.ОтборСтрок.Колонка1.ВидСравнения = ВидСравнения.Равно;
ЭлементыФормы.ИмяТабПоля.ОтборСтрок.Колонка1.Значение = ЗначениеОтбора;

А теперь конкретные примеры:

--------
//выбрать строки с ценой = 100
ЭлементыФормы.тпТовары.ОтборСтрок.Цена.Установить(100);

--------
//выбрать строки с ценой 100 и опр. валютой
ЭлементыФормы.тпТовары.ОтборСтрок.Валюта.Установить(ВалютаУпр);
ЭлементыФормы.тпТовары.ОтборСтрок.Цена.Установить(200);

--------
//выбрать строки с ценой >= 100 (неравенство)
ЭлементыФормы.тпТовары.ОтборСтрок.Цена.Использование = Истина;
ЭлементыФормы.тпТовары.ОтборСтрок.Цена.ВидСравнения = ВидСравнения.БольшеИлиРавно;
ЭлементыФормы.тпТовары.ОтборСтрок.Цена.Значение = 100;

--------
//выбрать строки с ценой от 100 до 200 (интервал)
ЭлементыФормы.тпТовары.ОтборСтрок.Цена.Использование = Истина;
ЭлементыФормы.тпТовары.ОтборСтрок.Цена.ВидСравнения = ВидСравнения.Интервал;
ЭлементыФормы.тпТовары.ОтборСтрок.Цена.ЗначениеС = 100;
ЭлементыФормы.тпТовары.ОтборСтрок.Цена.ЗначениеПо = 200;

--------
//выбрать строки с определенными товарами по списку

ЭлементыФормы.тпТовары.ОтборСтрок.Товар.Использование = Истина;
ЭлементыФормы.тпТовары.ОтборСтрок.Товар.ВидСравнения = ВидСравнения.ВСписке;
ЭлементыФормы.тпТовары.ОтборСтрок.Товар.Значение.Добавить(Товар1);
ЭлементыФормы.тпТовары.ОтборСтрок.Товар.Значение.Добавить(Товар2); "}
}
},
{24,
{"Сокращения",1,0,"",""},
{0,
{"НачалоМесяца",0,0,"НМ","НачалоМесяца(<?>)"}
},
{0,
{"КонецМесяца",0,0,"КМ","КонецМесяца(<?>)"}
},
{0,
{"НачалоДня",0,0,"НД","НачалоДня(<?>)"}
},
{0,
{"КонецДня",0,0,"КД","КонецДня(<?>)"}
},
{0,
{"ТекущаяДата",0,0,"ТД","ТекущаяДата()"}
},
{0,
{"ПериодДействияНачало",0,0,"ПДН","ПериодДействияНачало"}
},
{0,
{"ПериодДействияКонец",0,0,"ПДК","ПериодДействияКонец"}
},
{0,
{"БазовыйПериодНачало",0,0,"БПН","БазовыйПериодНачало"}
},
{0,
{"БазовыйПериодКонец",0,0,"БПК","БазовыйПериодКонец"}
},
{0,
{"ПланыВидовХарактеристик",0,0,"ПВХ","<?"""", ПланВидовХарактеристикПредопределенныеДанные>"}
},
{0,
{"ПланыВидовРасчета",0,0,"ПВР","<?"""", ПланВидовРасчетаПредопределенныеДанные>"}
},
{0,
{"ДобавиьМесяц",0,0,"ДМ","ДобавитьМесяц(<?>,)"}
},
{0,
{"Неопределено",0,0,"Неоп[ределено]","Неопределено"}
},
{0,
{"УстановитьПараметр",0,0,"УП","УстановитьПараметр(""<?>"",);"}
},
{0,
{"Контрагент",0,0,"Конт[рагент]","Контрагент"}
},
{0,
{"Номенклатура",0,0,"Номе[нклатура]","Номенклатура"}
},
{0,
{"Количество",0,0,"Кол[чество]","Количество"}
},
{0,
{"Стоимость",0,0,"Стои[мость]","Стоимость"}
},
{4,
{"Объекты Метаданных",1,0,"",""},
{0,
{"Документы",0,0,"Д[окументы]","Документы.<?"""", Документ>"}
},
{0,
{"Отчеты",0,0,"О[тчеты]","Отчеты.<?"""", Отчеты>"}
},
{0,
{"РегистрыСведений",0,0,"рс","РегистрыСведений.<?"""", РегистрСведений>"}
},
{0,
{"Справочники",0,0,"С[правочники]","Справочники.<?"""", Справочник>"}
}
},
{12,
{"Раскладка клавиатуры",1,0,"",""},
{0,
{">",0,0,"Ю",">"}
},
{0,
{"<",0,0,"Б","<"}
},
{0,
{"<>",0,0,"БЮ","<>"}
},
{0,
{"<=",0,0,"Б=","<="}
},
{0,
{">=",0,0,"Ю=",">="}
},
{0,
{"ЕстьТгдд",0,0,"ЕстьТгдд","ЕстьNULL(<?>, 0)"}
},
{0,
{"NULL",0,0,"тгдд","NULL"}
},
{0,
{"[]",0,0,"хъ","[<?>]"}
},
{0,
{"|",0,0,"\ ","|  <?>"}
},
{0,
{"'",0,0,"ээ","'<?>'"}
},
{0,
{"&",0,0,"? ","&<?>"}
},
{0,
{"WebЦвета",0,0,"цуицвета","WebЦвета"}
}
},
{3,
{"Символы",1,0,"",""},
{0,
{"Перевод строки",0,0,"ПС","+ Символы.ПС<?>"}
},
{0,
{"Перевод строки с плюсом",0,0,"ПС[+]","+ Символы.ПС + <?>"}
},
{0,
{"Табулятор",0,0,"таб","Символы.Таб<?>"}
}
},
{0,
{"тд		ТабДок",0,0,"тд","ТабДок = <?"""", ВыборВарианта, ""ЭлементыФормы.ТабДок"", ""ЭлементыФормы.ТабДок"", ""Новый ТабличныйДокумент"", ""Новый ТабличныйДокумент"">;
<?>"}
},
{0,
{"Это новый",0,0,"ЭтоН[овы]й","ЭтоНовый()"}
},
{0,
{"Выбор типа",0,1,"Тип","Тип(""<?""Выбор типа"", ВыборТипа)>"")"}
}
},
{7,
{"НаборЗаписей",1,0,"",""},
{0,
{"очистить РС",0,0,"очистить РС","Запись = РегистрыСведений.<?> .СоздатьНаборЗаписей();
 
    Запись.Записать();"}
},
{0,
{"РегистрСведений",0,0,"НаборЗаписей=","НаборЗаписей = РегистрыСведений.<?"""", РегистрСведений>.СоздатьНаборЗаписей();
//--
 			
НаборЗаписей.Отбор.Регистратор.Установить(результат.Регистратор);
НаборЗаписей.Прочитать();
			
Для каждого ЗаписьНабора из НаборЗаписей Цикл

КонецЦикла;
 
НаборЗаписей.Записать();
"}
},
{0,
{"РегистрНакопления",0,0,"НаборЗаписей=","НаборЗаписей = РегистрыНакопления.<?"""", РегистрНакопления>.СоздатьНаборЗаписей();
НаборЗаписей.Отбор.Регистратор.Установить(<?>);
НаборЗаписей.Прочитать();"}
},
{0,
{"РегистрБухгалтерии",0,0,"НаборЗаписей=","НаборЗаписей = РегистрыБухгалтерии.<?"""", РегистрБухгалтерии>.СоздатьНаборЗаписей();
НаборЗаписей.Отбор.Регистратор.Установить(<?>);
НаборЗаписей.Прочитать();

///*******************
 //Необходимо изменить существующие проводки и добавить значение Субконто
Набор = РегистрыБухгалтерии.Хозрасчетный.СоздатьНаборЗаписей();
Набор.Отбор.Регистратор.Установить(Объект.Ссылка);
Набор.Прочитать();
Для каждого Запись из Набор Цикл
    
    Если Запись.СчетКт =  ПланыСчетов.Хозрасчетный.ПрочиеРасчетыСРазнымиДебиторамиИКредиторами Тогда
	// для переборов субконто
        Запись.СубконтоКт[Запись.СчетКт.ВидыСубконто[1]] = Объект.ДоговорКонтрагента;
	// указывая конкретное значение
	//Запись.СубконтоКт.Договоры = Объект.ДоговорКонтрагента;
    КонецЕСли;
  
КонецЦикла;
Набор.Записать();
//*********************
// Перебор и замена реквизитов в проводках операции
   НаборЗаписейБУ = РегистрыБухгалтерии.Типовой.СоздатьНаборЗаписей();
   НаборЗаписейБУ.Отбор.Регистратор.Использование = Истина;
   НаборЗаписейБУ.Отбор.Регистратор.Значение = ОперацияБух;
   НаборЗаписейБУ.Прочитать();
   Для Каждого ЗаписьБУ Из НаборЗаписейБУ Цикл
      Если (ЗаписьБУ.СчетКт = ПланыСчетов.Типовой.ИндивидуальныйПодоходныйНалог) или
          (ЗаписьБУ.СчетКт = ПланыСчетов.Типовой.СоциальныйНалог) Тогда
         
         ВидСубк = ЗаписьБУ.СчетКт.ВидыСубконто[2].ВидСубконто;
         ЗаписьБУ.СубконтоКт.Вставить(ВидСубк, Контрагент);
      
         ЕстьИзменения = Истина;
      КонецЕсли;
   КонецЦикла;
   Если ЕстьИзменения Тогда
      НаборЗаписейБУ.Записать();
   КонецЕсли; "}
},
{0,
{"РегистрРасчета",0,0,"НаборЗаписей=","НаборЗаписей = РегистрыРасчета.<?"""", РегистрРасчета>.СоздатьНаборЗаписей();
НаборЗаписей.Отбор.Регистратор.Установить(<?>);
НаборЗаписей.Прочитать();"}
},
{0,
{"КОНЕЦПЕРИОДА",0,0,""," КОНЕЦПЕРИОДА(&КонецПериода, ДЕНЬ)"}
},
{0,
{"добавить записи в независимый регистр сведений",0,0,"добавить записи в независимый регистр сведений","МенеджерЗаписи = РегистрыСведений.ЗначенияСвойствОбъектов.СоздатьМенеджерЗаписи();
	
МенеджерЗаписи.Объект = ПолеВводаНоменклатура;
МенеджерЗаписи.Свойство = ПолеВводаСвойствоНоменклатуры;
МенеджерЗаписи.Значение = ПолеВводаЗначениеСвойства;

МенеджерЗаписи.Записать();"}
}
},
{8,
{"Прочие",1,0,"",""},
{0,
{"Формат",0,0,"Формат","Формат(<?>, ""<?, ФорматнаяСтрока>"")"}
},
{0,
{"Конструктор описания типов",0,0,"","<?""Конструктор описания типов"", КонструкторОписанияТипов>"}
},
{0,
{"Проверка типа",0,0,"","Если ТипЗнч(<?""Выражение для проверки типа"">) = Тип(""<?""Выберите тип"", ВыборТипа>"") Тогда

	<?>

КонецЕсли;"}
},
{0,
{"Шрифт",0,0,"Шрифт=","//	КОНСТРУКТОР     Имя шрифта, Размер, Жирный, Наклонный, Подчеркнутый, Зачеркнутый
Шрифт = Новый Шрифт(   <?>       ,       ,       ,          ,             ,            );"}
},
{0,
{"ЧислоПрописью",0,0,"Число[Прописью]","ЧислоПрописью(<?>,,""рубль, рубля, рублей, м, копейка, копейки, копеек, ж, 2"")"}
},
{0,
{"Выборка",0,0,"Выборка=","Выборка = <?>.Выбрать();
Пока Выборка.Следующий() Цикл

КонецЦикла; "}
},
{0,
{"Пользователь",0,0,"Пользователь","	Пользователь = Пользователи.ТекущийПользователь();
	ПольПоСпр = Справочники.Пользователи.НайтиПоНаименованию(Пользователь);	
	ПольПоСпр.Родитель.Наименование = ""Группа бухгалтерского учета"" 
	//****************
    ПользователиИнформационнойБазы.ТекущийПользователь()"}
},
{0,
{"ПолныеПрава",0,0,"роль","Если НЕ РольДоступна(""ПолныеПрава"") Тогда
    Сообщить(""Для проведения данного документа необходима роль Полные права"");
    Отказ = Истина;
КонецЕсли;"}
}
},
{4,
{"Инструкции предпроцессору",1,0,"",""},
{0,
{"#Если",0,0,"№Если","#Если <?"""", ВыборВарианта, ""Клиент"", ""Клиент"", ""Сервер"", ""Сервер"", ""ВнешнееСоединение"", ""ВнешнееСоединение"" ,""ТолстыйКлиентОбычноеПриложение"", ""ТолстыйКлиентОбычноеПриложение"", ""ТолстыйКлиентУправляемоеПриложение"",""ТолстыйКлиентУправляемоеПриложение"", ""ТонкийКлиент"", ""ТонкийКлиент"", ""ВебКлиент"", ""ВебКлиент""> Тогда
    <?> 	
#КонецЕсли"}
},
{0,
{"&На...",0,0,"?Н[а]","&<?""Выберите директиву компиляции"", ВыборВарианта,
							""На клиенте"", ""НаКлиенте"",
							""На сервере"", ""НаСервере"",							
							""На сервере без контекста"", ""НаСервереБезКонтекста"",
							""На клиенте на сервере"", ""НаКлиентеНаСервере"",
							""На клиенте на сервере без контекста"", ""НаКлиентеНаСервереБезКонтекста"">"}
},
{0,
{"№ -> #",0,0,"№","<?"""", ВыборВарианта,		""Область"", ""#Область <?> #КонецОбласти"",
							""Клиент"", ""#Если Клиент Тогда <?> #КонецЕсли"",
							""На клиенте"", ""#Если НаКлиенте Тогда <?> #КонецЕсли"",
							""Сервер"", ""#Если Сервер Тогда <?> #КонецЕсли"",
							""На сервере"", ""#Если НаСервере Тогда <?> #КонецЕсли"",
							""Тонкий клиент"", ""#Если ТонкийКлиент Тогда <?> #КонецЕсли"",
							""Веб клиент"", ""#Если ВебКлиент Тогда <?> #КонецЕсли"",
							""Толстый клиент обычное приложение"", ""#Если ТолстыйКлиентОбычноеПриложение Тогда <?> #КонецЕсли"",
							""Толстый клиент управляемое приложение"", ""#Если ТолстыйКлиентУправляемоеПриложение Тогда <?> #КонецЕсли"",
							""ВнешнееСоединение"", ""#Если ВнешнееСоединение Тогда <?> #КонецЕсли"">"}
},
{0,
{"#Если",0,0,"#Если","#Если <?"""", ВыборВарианта, ""Клиент"", ""Клиент"", ""Сервер"", ""Сервер"", ""ВнешнееСоединение"", ""ВнешнееСоединение"" ,""ТолстыйКлиентОбычноеПриложение"", ""ТолстыйКлиентОбычноеПриложение"", ""ТолстыйКлиентУправляемоеПриложение"",""ТолстыйКлиентУправляемоеПриложение"", ""ТонкийКлиент"", ""ТонкийКлиент"", ""ВебКлиент"", ""ВебКлиент""> Тогда
    <?> 	
#КонецЕсли"}
}
},
{4,
{"Блокировки",1,0,"",""},
{0,
{"Блокировка РегистрНакопления",0,0,"Блокировка=","Блокировка = Новый БлокировкаДанных;
ЭлементБлокировки = Блокировка.Добавить(""РегистрНакопления.<?"""", РегистрНакопления>"");
ЭлементБлокировки.Режим = <?"""", ВыборВарианта, ""РежимБлокировкиДанных.Исключительный"", ""РежимБлокировкиДанных.Исключительный"", ""РежимБлокировкиДанных.Разделяемый"", ""РежимБлокировкиДанных.Разделяемый"">;
//ЭлементБлокировки.ИсточникДанных = <?>;
//ЭлементБлокировки.ИспользоватьИзИсточникаДанных("""", """");
//ЭлементБлокировки.УстановитьЗначение("""", );
Блокировка.Заблокировать(); 
"}
},
{0,
{"Блокировка РегистрБухгалтерии",0,0,"Блокировка=","Блокировка = Новый БлокировкаДанных;
ЭлементБлокировки = Блокировка.Добавить(""РегистрНакопления.<?"""", РегистрБухгалтерии>"");
ЭлементБлокировки.Режим = <?"""", ВыборВарианта, ""РежимБлокировкиДанных.Исключительный"", ""РежимБлокировкиДанных.Исключительный"", ""РежимБлокировкиДанных.Разделяемый"", ""РежимБлокировкиДанных.Разделяемый"">;
//ЭлементБлокировки.ИсточникДанных = <?>;
//ЭлементБлокировки.ИспользоватьИзИсточникаДанных("""", """");
//ЭлементБлокировки.УстановитьЗначение("""", );
Блокировка.Заблокировать(); 
"}
},
{0,
{"Блокировка РегистрСведений",0,0,"Блокировка=","Блокировка = Новый БлокировкаДанных;
ЭлементБлокировки = Блокировка.Добавить(""РегистрНакопления.<?"""", РегистрСведений>"");
ЭлементБлокировки.Режим = <?"""", ВыборВарианта, ""РежимБлокировкиДанных.Исключительный"", ""РежимБлокировкиДанных.Исключительный"", ""РежимБлокировкиДанных.Разделяемый"", ""РежимБлокировкиДанных.Разделяемый"">;
//ЭлементБлокировки.ИсточникДанных = <?>;
//ЭлементБлокировки.ИспользоватьИзИсточникаДанных("""", """");
//ЭлементБлокировки.УстановитьЗначение("""", );
Блокировка.Заблокировать(); 
"}
},
{0,
{"Блокировка РегистрРасчета",0,0,"Блокировка=","Блокировка = Новый БлокировкаДанных;
ЭлементБлокировки = Блокировка.Добавить(""РегистрНакопления.<?"""", РегистрРасчета>"");
ЭлементБлокировки.Режим = <?"""", ВыборВарианта, ""РежимБлокировкиДанных.Исключительный"", ""РежимБлокировкиДанных.Исключительный"", ""РежимБлокировкиДанных.Разделяемый"", ""РежимБлокировкиДанных.Разделяемый"">;
//ЭлементБлокировки.ИсточникДанных = <?>;
//ЭлементБлокировки.ИспользоватьИзИсточникаДанных("""", """");
//ЭлементБлокировки.УстановитьЗначение("""", );
Блокировка.Заблокировать(); 
"}
}
},
{3,
{"Стандарты разработки",1,0,"",""},
{0,
{"ПрерываниеПользователя",0,0,"Пре[рывани]е","ОбработкаПрерыванияПользователя();"}
},
{0,
{"+1 (инкремент)",0,0,"++","<?""Значение""> = <?""Значение""> + 1;"}
},
{0,
{".Субконто",0,0,".Субконто"," ВЫРАЗИТЬ(ХозрасчетныйОстатки.Субконто1 КАК <?""Значение"">)"}
}
},
{11,
{"Информационные сообщения",1,0,"",""},
{0,
{"Состояние",0,0,"Сос[тояни]е","Состояние(НСтр(""ru = '<?>'""));"}
},
{0,
{"Сообщить (не рекомендуется)",0,0,"Соо[бщить]","//Сообщить(<?>);
Сообщение = Новый СообщениеПользователю;
Сообщение.Текст = ""<?>"";
Сообщение.Сообщить();"}
},
{0,
{"Сообщить",0,0,"Сооб[щит]ь","Сообщить(НСтр(""ru = '<?>'""), СтатусСообщения.<?""подсказка"", ВыборВарианта, ""Информация"", ""Информация"", ""Без статуса"", ""БезСтатуса"", ""Обычное"", ""Обычное"", ""Внимание"", ""Внимание"", ""Важное"", ""Важное"", ""Очень важное"", ""ОченьВажное"">);"}
},
{0,
{"Сообщение пользователю",0,0,"Сооб[щениеПользовател]ю","Сообщение = Новый СообщениеПользователю;
Сообщение.Текст = НСтр(""ru = '<?>'"");
Сообщение.Поле = """";
Сообщение.УстановитьДанные();
Сообщение.Сообщить();"}
},
{0,
{"Показать оповещение пользователя",0,0,"Показ[атьОповещениеПользовател]я","ПоказатьОповещениеПользователя(НСтр(""ru = '<?>'""), ""<НавигационнаяСсылка>"", ""<Пояснение>"", ""<Картинка>""); "}
},
{0,
{"Предупреждение",0,0,"Пре[дупреждени]е","Предупреждение(НСтр(""ru = '<?>'""), 30);"}
},
{0,
{"Вопрос",0,0,"Во[про]с","Ответ = Вопрос(НСтр(""ru = '<?""Текст вопроса""><?>'""), <?""Режим диалога вопрос"", ВыборВарианта, ""ДаНет"", ""РежимДиалогаВопрос.ДаНет"", ""ДаНетОтмена"", ""РежимДиалогаВопрос.ДаНетОтмена"", ""ОК"", ""РежимДиалогаВопрос.ОК"", ""ОКОтмена"", ""РежимДиалогаВопрос.ОКОтмена"", ""ПовторитьОтмена"", ""РежимДиалогаВопрос.ПовторитьОтмена"", ""ПрерватьПовторитьПропустить"", ""РежимДиалогаВопрос.ПрерватьПовторитьПропустить"">, 60);
"}
},
{0,
{"Вопрос с анализом результата",0,0,"От[ве]т","Ответ = Вопрос(НСтр(""ru = '<?""Текст вопроса"">'""), <?""Режим диалога вопрос"", ВыборВарианта, ""ДаНет"", ""РежимДиалогаВопрос.ДаНет"", ""ДаНетОтмена"", ""РежимДиалогаВопрос.ДаНетОтмена"", ""ОК"", ""РежимДиалогаВопрос.ОК"", ""ОКОтмена"", ""РежимДиалогаВопрос.ОКОтмена"", ""ПовторитьОтмена"", ""РежимДиалогаВопрос.ПовторитьОтмена"", ""ПрерватьПовторитьПропустить"", ""РежимДиалогаВопрос.ПрерватьПовторитьПропустить"">, 60);
Если Ответ <?"""", ВыборВарианта, ""Равен"", ""="", ""Не равен"", ""<>""> <?""Код возврата диалога"", ВыборВарианта, ""Да"", ""КодВозвратаДиалога.Да"", ""Нет"", ""КодВозвратаДиалога.Нет"", ""ОК"", ""КодВозвратаДиалога.ОК"", ""Отмена"", ""КодВозвратаДиалога.Отмена"", ""Повторить"", ""КодВозвратаДиалога.Повторить"", ""Прервать"", ""КодВозвратаДиалога.Прервать"", ""Пропустить"", ""КодВозвратаДиалога.Пропустить"", ""Таймаут"", ""КодВозвратаДиалога.Таймаут""> Тогда
	<?>
КонецЕсли; "}
},
{0,
{"Информация об ошибке",0,0,"Инфо[рмацияОбОшибк]е","ИнфоОшибки = ИнформацияОбОшибке();
Сообщить(""Описание = '"" + ИнфоОшибки.Описание + ""'"", СтатусСообщения.Внимание);
Сообщить(""Модуль = '"" + ИнфоОшибки.ИмяМодуля + ""'"", СтатусСообщения.Важное);
Сообщить(""НомерСтроки = '"" + ИнфоОшибки.НомерСтроки + ""'"", СтатусСообщения.Важное);
Сообщить(""ИсходнаяСтрока = '"" + ИнфоОшибки.ИсходнаяСтрока + ""'"", СтатусСообщения.Важное);"}
},
{0,
{"Открыть значение",0,0,"Откр[ытьЗначени]е","ОткрытьЗначение(<?>);"}
},
{4,
{"Функции для вызова диалога ввода данных",1,0,"",""},
{0,
{"Ввести дату",0,0,"ВвестиД[ату]","ЗначениеВведено = ВвестиДату(<?>, ""Укажите дату"", ЧастиДаты.<?""Части даты"", ВыборВарианта, ""Дата"", ""Дата"", ""Дата и время"", ""ДатаВремя"", ""Время"", ""Время"">);"}
},
{0,
{"Ввести значение",0,0,"ВвестиЗ[начение]","ЗначениеВведено = ВвестиЗначение(<?>, ""Введите "", <?"""", КонструкторОписанияТипов>);"}
},
{0,
{"Ввести строку",0,0,"ВвестиС[троку]","ЗначениеВведено = ВвестиСтроку(<?>, ""Введите "", <?""Длина строки"">, <?"""", ВыборВарианта, ""Не многострочная"", ""Ложь"", ""Многострочная"", ""Истина"">);"}
},
{0,
{"Ввести число",0,0,"ВвестиЧ[исло]","ЗначениеВведено = ВвестиЧисло(<?>, ""Введите "", <?""Длина"">, <?""Точность"">);"}
}
}
},
{6,
{"Формы",1,0,"",""},
{5,
{"Работа с диалогами",1,0,"",""},
{0,
{"ВыборФайла",0,1,"ВыборФайла=","ВыборФайла = Новый ДиалогВыбораФайла(<?"""", ВыборВарианта, ""Открытие"", ""РежимДиалогаВыбораФайла.Открытие"", ""Сохранение"", ""РежимДиалогаВыбораФайла.Сохранение"", ""ВыборКаталога"", ""РежимДиалогаВыбораФайла.ВыборКаталога"">);
ВыборФайла.ПолноеИмяФайла = <?>;
Если Не ВыборФайла.Выбрать() Тогда
	Возврат;		
КонецЕсли;"}
},
{0,
{"Получение массива элементов формы via TormozIT",0,0,"","Функция ЛксСтрокаВнутрВХМЛТело(вхСтрока, выхХМЛТело = Неопределено) Экспорт
	
	//{ Получение одной длинной строки
	выхХМЛТело = СтрЗаменить(вхСтрока,СИМВОЛЫ.ПС,"""");
	выхХМЛТело = СтрЗаменить(выхХМЛТело,СИМВОЛЫ.ВК,"""");
	//}
	
	//{ Заменяем символы, критичные для XML
	//	& на &
	//	< на <
	//	> на >
	выхХМЛТело = СтрЗаменить(выхХМЛТело,""&"",""&"");
	выхХМЛТело = СтрЗаменить(выхХМЛТело,""<"",""<"");
	выхХМЛТело = СтрЗаменить(выхХМЛТело,"">"","">"");
	//}
	
	//{ Замена одинарных символов
	выхХМЛТело = СтрЗаменить(выхХМЛТело,"","",""</data><data>"");
	выхХМЛТело = СтрЗаменить(выхХМЛТело,""{"",""<elem><data>"");
	выхХМЛТело = СтрЗаменить(выхХМЛТело,""}"",""</data></elem>"");
	//}
	
	//{ Удаляем лишние блоки <data><elem> и </data></elem>
	выхХМЛТело = СтрЗаменить(выхХМЛТело,""<data><elem>"",""<elem>"");
	выхХМЛТело = СтрЗаменить(выхХМЛТело,""</elem></data>"",""</elem>"");
	//}
	
	//{ Добавляем перенос строки к </data> и к </elem> для удобства поиска различий
	выхХМЛТело = СтрЗаменить(выхХМЛТело,""</elem>"",""</elem>""+СИМВОЛЫ.ПС);
	выхХМЛТело = СтрЗаменить(выхХМЛТело,""</data>"",""</data>""+СИМВОЛЫ.ПС);
	//}
	
	Возврат выхХМЛТело;
	
КонецФункции

Функция ЛксПолучитьМассивИменРеквизитовФормы(Форма) Экспорт

	СтрокаФормы = ЗначениеВСтрокуВнутр(Форма);
	XMLСтрокаФормы = ЛксСтрокаВнутрВХМЛТело(СтрокаФормы);
	ЧтениеXML = Новый ЧтениеXML;
	ЧтениеXML.УстановитьСтроку(XMLСтрокаФормы);
	ПостроительDOM = Новый ПостроительDOM;
	ДокументDOM = ПостроительDOM.Прочитать(ЧтениеXML);
	РазыменовательПИ = Новый РазыменовательПространствИменDOM(ДокументDOM);
	ИмяЭлемента = ""/elem/elem/elem[2]/elem[2]/elem/data[3]"";
	РезультатXPath = ДокументDOM.ВычислитьВыражениеXPath(ИмяЭлемента + ""/text()"", ДокументDOM,
		РазыменовательПИ, ТипРезультатаDOMXPath.НеупорядоченныйИтераторУзлов);
	Массив = Новый Массив;
	Пока 1 = 1 Цикл
		Узел = РезультатXPath.ПолучитьСледующий();
		Если Узел = Неопределено Тогда
			Прервать;
		КонецЕсли;
		Текст = Узел.ТекстовоеСодержимое;
		Длина = СтрДлина(Текст);
		Текст = Сред(Текст, 2, Длина - 2);
		Массив.Добавить(Текст);
	КонецЦикла;
	Возврат Массив;

КонецФункции // ЛксПолучитьМассивИменРеквизитовФормы()
"}
},
{0,
{"Обработка быстрого выбора для поля ввода вместо поля выбора (""..."" вместо ""треугольничка"")",0,0,"","ВыбранноеЗначение = ЭтаФорма.ВыбратьИзМеню(Элемент.СписокВыбора, Элемент);
Если ВыбранноеЗначение = Неопределено Тогда
	Возврат
Иначе
	Элемент.Значение = ВыбранноеЗначение;
КонецЕсли;"}
},
{0,
{"Установка отбора для формы выбора в соответствии со ВСЕМИ реквизитами шапки документа",0,0,"","Для каждого РеквизитШапки Из Объект.Метаданные().Реквизиты Цикл
	ЭлементОтбора = Отбор.Найти(РеквизитШапки.Имя);
	ЗначениеРеквизита = Вычислить(""Объект.""+РеквизитШапки.Имя);
	Если ЗначениеЗаполнено(ЗначениеРеквизита) И ЭлементОтбора<>Неопределено Тогда
		ЭлементОтбора.Установить(ЗначениеРеквизита);
	КонецЕсли;
КонецЦикла;
"}
},
{0,
{"Безопасная обработка - проверка текущей строки табличного поля",0,0,"","	Если СтрокаДерева = Неопределено Тогда
	
		СтрокаДерева = ЭлементыФормы.<?""Имя табличного поля"">.ТекущиеДанные;
		
		Если СтрокаДерева = Неопределено Тогда
		
			Возврат Неопределено
		
		КонецЕсли;
	
	КонецЕсли;"}
}
},
{3,
{"Генерация форм",1,0,"",""},
{0,
{"Размещение элемента на форме с привязкой к существующим элементам",0,0,"","Процедура РазместитьРеквизитНаФорме(Форма, ИмяЭлемента, ТипЭлемента, ПривязкаКЭлементуФормы, ИмяРеквизита, ПоложениеОтносительноПривязки = ""снизу"", ИмяОбработчика = """") Экспорт
	Элемент = Форма.ЭлементыФормы.Добавить(ТипЭлемента, ИмяЭлемента, Истина);
	
	Если ТипЭлемента = Тип(""Надпись"") Тогда
		Элемент.Заголовок = Метаданные().Реквизиты[ИмяРеквизита].Синоним;
	ИначеЕсли ТипЭлемента = Тип(""ПолеВвода"") Тогда
		Элемент.Данные = ИмяРеквизита;
	КонецЕсли;
	
	Если ПоложениеОтносительноПривязки = ""снизу"" Тогда
		Элемент.Верх = ПривязкаКЭлементуФормы.Верх + 20;
		Элемент.Лево = ПривязкаКЭлементуФормы.Лево;
	ИначеЕсли ПоложениеОтносительноПривязки = ""справа"" Тогда
		Элемент.Верх = ПривязкаКЭлементуФормы.Верх;
		Элемент.Лево = ПривязкаКЭлементуФормы.Лево + 100;
	КонецЕсли;
	Элемент.Ширина = ПривязкаКЭлементуФормы.Ширина;
	Элемент.Высота = ПривязкаКЭлементуФормы.Высота;
    Элемент.УстановитьПривязку(
	    ГраницаЭлементаУправления.Лево,
	    ПривязкаКЭлементуФормы,
	    ГраницаЭлементаУправления.Лево);
	Элемент.УстановитьПривязку(
	    ГраницаЭлементаУправления.Верх,
	    ПривязкаКЭлементуФормы,
	    ГраницаЭлементаУправления.Низ);
	Элемент.УстановитьПривязку(
	    ГраницаЭлементаУправления.Право,
	    ПривязкаКЭлементуФормы,
	    ГраницаЭлементаУправления.Право);

	Если НЕ ИмяОбработчика = """" Тогда
		Форма.ПодключитьОбработчикИзмененияДанных(ИмяРеквизита, ИмяОбработчика);
	КонецЕсли;	
КонецПроцедуры
"}
},
{0,
{"Размещение колонки в ТЧ",0,0,"","Процедура ДобавитьКолонкуТЧ(Форма, ИмяТЧ, ИмяРеквизитаТЧ, ИмяОбработчика = """")  Экспорт
    МДРеквизита = Метаданные().ТабличныеЧасти[ИмяТЧ].Реквизиты[ИмяРеквизитаТЧ];
	НоваяКолонка = Форма.ЭлементыФормы[ИмяТЧ].Колонки.Добавить(ИмяРеквизитаТЧ, МДРеквизита.Синоним);
	Если МДРеквизита.Тип = Новый ОписаниеТипов(""Булево"") Тогда
		НоваяКолонка.ДанныеФлажка = ИмяРеквизитаТЧ;
	Иначе
		НоваяКолонка.Данные = ИмяРеквизитаТЧ;
	КонецЕсли;
	НоваяКолонка.ПодсказкаВШапке = МДРеквизита.Комментарий;
	
	Если НЕ ИмяОбработчика = """" Тогда
		Форма.ПодключитьОбработчикИзмененияДанных(ИмяТЧ, ИмяОбработчика);
	КонецЕсли;
КонецПроцедуры

"}
},
{0,
{"Сохранение и восстановление настроек колонок при генерации дерева/таблицы методом ""СоздатьКолонки""",0,0,"","
	ДФ = ЭлементыФормы.ДеревоПереченьИмущества;
	Колонки = ДФ.Колонки;
	Для каждого К Из Колонки Цикл
	
		СоответствиеКолонок.Вставить(К.Имя, Новый Структура(""АвтоВысотаЯчейки,Видимость,ВысотаЯчейки,ГоризонтальноеПоложениеВКолонке,Положение,Ширина,ДействиеПриИзменении,Индекс"", К.АвтоВысотаЯчейки, К.Видимость, К.ВысотаЯчейки, К.ГоризонтальноеПоложениеВКолонке, К.Положение, К.Ширина, К.ЭлементУправления.ПолучитьДействие(""ПриИзменении""), Колонки.Индекс(К)));
	
	КонецЦикла;
		
	ДФ.СоздатьКолонки();
	
 	Для каждого К Из Колонки Цикл
		
		СтруктураНастроекКолонки = СоответствиеКолонок.Получить(К.Имя);
		ЗаполнитьЗначенияСвойств(К, СтруктураНастроекКолонки);
		К.ЭлементУправления.УстановитьДействие(""ПриИзменении"", СтруктураНастроекКолонки.ДействиеПриИзменении);
	
	КонецЦикла;
	
	Для каждого К Из СоответствиеКолонок Цикл
		КолонкаНаФорме = Колонки.Найти(К.Ключ);
		Если К.Значение.Индекс <> Колонки.Индекс(КолонкаНаФорме) Тогда
		
			Колонки.Сдвинуть(КолонкаНаФорме, К.Значение.Индекс - Колонки.Индекс(КолонкаНаФорме));
		
		КонецЕсли;
	
	КонецЦикла;

"}
}
},
{3,
{"Свойства",1,0,"",""},
{0,
{"Полько просмотр",0,0,"Поль[коПросмот]р","Элементы.<?""Имя реквизита"">.ПолькоПросмотр = <?""Укажите значение свойства"", ВыборВарианта, ""Истина"", ""Истина"", ""Ложь"", ""Ложь"">;"}
},
{0,
{"Доступность",0,0,"Дос[тупност]ь","Элементы.<?""Имя реквизита"">.Доступность = <?""Укажите значение свойства"", ВыборВарианта, ""Истина"", ""Истина"", ""Ложь"", ""Ложь"">;"}
},
{0,
{"Видимость",0,0,"Види[мост]ь","Элементы.<?""Имя реквизита"">.Видимость = <?""Укажите значение свойства"", ВыборВарианта, ""Истина"", ""Истина"", ""Ложь"", ""Ложь"">;"}
}
},
{0,
{"Элементы",0,0,"Эле[мент]ы","Элементы.<?>"}
},
{0,
{"Элементы формы",0,0,"Эле[мент]ы","ЭлементыФормы.<?>"}
},
{0,
{"Получить форму",0,0,"Пол[учитьФорм]у","ПолучитьФорму(<?>""<Форма>"", ""<Владелец>"", ""<Ключ уникальности>"");"}
}
},
{4,
{"Алгоритмы",1,0,"",""},
{0,
{"Удаление элементов списка",0,0,"","// Обход списка с конца, так как при удалении элементы сдвигаются к началу
КоличествоСтрок = <?""ИмяСписка"">.Количество();
Для сч=1 По КоличествоСтрок  Цикл
	_Строка = <?""ИмяСписка"">[КоличествоСтрок-сч];
	<?""ИмяСписка"">.Удалить(_Строка);
КонецЦикла;
"}
},
{0,
{"Обход документов, выведенных в форме списка",0,0,"","Построитель=Новый ПостроительОтчета;
Построитель.ИсточникДанных=Новый ОписаниеИсточникаДанных(ДокументСписок);
Выборка=Построитель.Результат.Выбрать();
Пока Выборка.Следующий() Цикл
	
КонецЦикла;
"}
},
{0,
{"Транзакция с просмотром результатов и возможностью отката изменений",0,0,"","ВТРанзакции = Истина;
Если ВТранзакции Тогда	НачатьТранзакцию() КонецЕсли;

Если ВТранзакции Тогда
	ФормаСписка = <?""Тип объекта?"", ВыборТипа>.ПолучитьФормуСписка();
	Если ФормаСписка.Открыта() Тогда
		
		ФормаСписка.Закрыть();
		
	КонецЕсли;
	ФормаСписка.ОткрытьМодально();
	Если Вопрос(""Принять изменения?"", РежимДиалогаВопрос.ДаНет, <?""Таймаут вопроса в секундах"">, КодВозвратаДиалога.Нет) = КодВозвратаДиалога.Да Тогда
	
		ЗафиксироватьТранзакцию();
	
	Иначе
	
		ОтменитьТранзакцию();
	
	КонецЕсли;
КонецЕсли;"}
},
{14,
{"Готовый код",1,0,"",""},
{0,
{"Найти строки",0,0,"_Най[тиСтрок]и","СтруктураОтбора = Новый Структура;
СтруктураОтбора.Вставить(""<?>"", );

НайденныеСтроки = .НайтиСтроки(СтруктураОтбора);
Если НайденныеСтроки.Количество() > 0 Тогда
	
КонецЕсли; 
"}
},
{0,
{"Текущие данные",0,0,"_Тек[ущиеДанны]е","ТекущиеДанные = ЭлементыФормы.<?>.ТекущиеДанные;
Если ТекущиеДанные = Неопределено Тогда
	Возврат;
КонецЕсли; "}
},
{0,
{"Набор записей записать",0,0,"_Наб[орЗаписеЗаписат]ь","НаборЗаписей = <?>*.*.СоздатьНаборЗаписей();

// структура отбора записей регистра
//НаборЗаписей.Отбор[""Регистратор""].Установить(<?>, Истина);
НаборЗаписей.Отбор[""*""].Установить(*, Истина);

НаборЗаписей.Прочитать();

Если НаборЗаписей.Количество() > 0 Тогда
	НаборЗаписей.Очистить();
КонецЕсли;

НоваяЗапись = НаборЗаписей.Добавить();

// СЛУЖЕБНЫЕ:
НоваяЗапись.Активность = Истина;		

// ИЗМЕРЕНИЯ:
НоваяЗапись.* = ;

// РЕСУРСЫ:
//НоваяЗапись. = ;

// РЕКВИЗИТЫ:
//НоваяЗапись. = ;

Попытка						
	НаборЗаписей.Записать(Истина); // запись: замещать существующие записи			
Исключение
	//Сообщить(НСтр(""ru = '""+ОписаниеОшибки()+""'""), СтатусСообщения.Внимание);
КонецПопытки;
"}
},
{0,
{"Оформления строк",0,0,"_Офо[рмленияСтро]к","Для каждого ОформлениеСтроки Из ОформленияСтрок Цикл
	
	ДанныеСтроки = ОформлениеСтроки.ДанныеСтроки;
	<?>
	
КонецЦикла;
"}
},
{0,
{"Скопировать строки таблицы по отбору",0,0,"_Ско[пироват]ь","<?""Имя таблицы"">.Скопировать(<?""Имя таблицы"">.НайтиСтроки(Новый Структура(<?>""ИмяПараметраОтбора"", ""ЗначениеПараметраОтбора"")), ""КопируемыеКолонки"")"}
},
{0,
{"Таблица значений ( структура )",0,0,"_Таб[лицаЗначени]й","<?""Имя таблицы""> = Новый ТаблицаЗначений;
<?""Имя таблицы"">.Колонки.Добавить(""<Имя>""<?>, ""<Тип>"", ""<Заголовок>"", ""<Ширина>"");
//<?""Имя таблицы"">.Индексы.Добавить(""<ИменаКолонок>"");	
"}
},
{0,
{"Отказ = Истина",0,0,"_ои","Отказ = Истина;<?>"}
},
{3,
{"Условия",1,0,"",""},
{0,
{"Если Не Отказ Тогда",0,0,"_ЕслиН[еОтка]з","Если Не Отказ Тогда
	<?>
КонецЕсли;
"}
},
{0,
{"Если ТипЗнч ... Тогда",0,0,"_ЕслиТ[ипЗн]ч","Если ТипЗнч(<?""Выражение для проверки типа"">) = Тип(""<?""Выберите тип"", ВыборТипа>"") Тогда

	<?>

КонецЕсли;"}
},
{0,
{"Если Не ЗначениеЗаполнено ... Тогда",0,0,"_ЕслиНеЗ[З]","Если Не ЗначениеЗаполнено(<?>) Тогда
	
КонецЕсли;"}
}
},
{2,
{"Информативность",1,0,"",""},
{0,
{"Обработано данных",0,0,"_Обр[абота]н","Количество	= <?>.Количество();
НомерПП		= 0;

НомерПП = НомерПП + 1;	
Состояние(НСтр(""ru = 'Обработано ""+НомерПП+"" из ""+Количество+""'""));
"}
},
{0,
{"Замер скорости выполнения кода",0,0,"_Зам[ерСкорост]и","//// { ЗАМЕР ВРЕМЕНИ ВЫПОЛНЕНИЯ КОДА
__СкриптКонтрол = Новый COMОбъект(""MSScriptControl.ScriptControl"");
__СкриптКонтрол.Language = ""javascript"";

ЗамерВремениНачало = __СкриптКонтрол.eval(""new Date().getTime()"");
//// } ЗАМЕР ВРЕМЕНИ ВЫПОЛНЕНИЯ КОДА

<?>

//// { ЗАМЕР ВРЕМЕНИ ВЫПОЛНЕНИЯ КОДА
ЗамерВремениОкончание = __СкриптКонтрол.eval(""new Date().getTime()"");	

Миллисекунды		= ЗамерВремениОкончание-ЗамерВремениНачало;
// Часы
КолВоЧасов			= Цел(Миллисекунды/(60*60*1000));
Остаток				= Миллисекунды-КолВоЧасов*60*60*1000;	
// Минуты
КолВоМинут			= Цел(Остаток/(60*1000));
Остаток				= Остаток-КолВоМинут*60*1000;	
// Секунды,миллисекунды
КолВоСекунд			= Цел(Остаток/1000);
КолВоМиллисекунд	= Остаток-КолВоСекунд*1000;
	
Сообщить(НСтр(""ru = 'Время выполнения: "" + Формат(КолВоЧасов,""ЧЦ=3;ЧН=;ЧВН="")+"":""+Формат(КолВоМинут,""ЧЦ=2;ЧН=;ЧВН="")+"":""+Формат(КолВоСекунд,""ЧЦ=2;ЧН=;ЧВН="")+"":""+Формат(КолВоМиллисекунд,""ЧЦ=3;ЧН=;ЧВН="") + "" мс.'""), СтатусСообщения.Информация);
//// } ЗАМЕР ВРЕМЕНИ ВЫПОЛНЕНИЯ КОДА"}
}
},
{5,
{"СКД",1,0,"",""},
{0,
{"Вывести результат отчета на СКД в табличное поле",0,0,"","<?""Поле табличного документа"">.Очистить();
                     
ОтчетОбъект = Отчеты.<?""Отчет"", Отчет>.Создать();

СКД = ОтчетОбъект.СхемаКомпоновкиДанных;
Настройки = СКД.НастройкиПоУмолчанию;

////////////////////////////////////////////////////////////////////////////////
// Настройки отчета
<?>
// Параметры

// Отборы

КомпоновщикМакетаКД = Новый КомпоновщикМакетаКомпоновкиДанных;
МакетКД = КомпоновщикМакетаКД.Выполнить(СКД, Настройки);

ПроцессорКД = Новый ПроцессорКомпоновкиДанных;
ПроцессорКД.Инициализировать(МакетКД);

ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
ПроцессорВывода.УстановитьДокумент(<?""Поле табличного документа"">);
ПроцессорВывода.Вывести(ПроцессорКД);"}
},
{0,
{"Вывести результат формирования СКД в таблицу значений",0,0,"","Настройки = КомпоновщикНастроек.ПолучитьНастройки();

КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;

МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, Настройки, , ,Тип(""ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений""));
				
ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновки);	

ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
ПроцессорВывода.УстановитьОбъект(Результат);

ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных, Истина);
"}
},
{0,
{"Алгоритм программного формирования отчета СКД",0,0,"","Результат.Очистить();
	
Настройки = КомпоновщикНастроек.ПолучитьНастройки();

ДанныеРасшифровки = Новый ДанныеРасшифровкиКомпоновкиДанных;

КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;

МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, Настройки, ДанныеРасшифровки);

ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновки, , ДанныеРасшифровки);
	
ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
ПроцессорВывода.УстановитьДокумент(Результат);

// 1. Вариант упрошенный
//ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных);

// 2. Вариант детальный
ПроцессорВывода.НачатьВывод();

//ТаблицаЗафиксирована = Ложь;
Пока Истина Цикл
	
	ЭлементРезультата = ПроцессорКомпоновкиДанных.Следующий();
	
	Если ЭлементРезультата = Неопределено Тогда
		Прервать;
	Иначе
		ПроцессорВывода.ВывестиЭлемент(ЭлементРезультата);
		// Фиксация шапки
		//Если Не ТаблицаЗафиксирована И ЭлементРезультата.ЗначенияПараметров.Количество() > 0 Тогда
		//	ТаблицаЗафиксирована = Истина;
		//	Результат.ФиксацияСверху = Результат.ВысотаТаблицы - 1;
		//КонецЕсли;
	КонецЕсли;
КонецЦикла;

ПроцессорВывода.ЗакончитьВывод();"}
},
{0,
{"Получить СКД из макета и инициализировать настройки КД",0,0,"","СКД = ПолучитьМакет(""<ИмяМакета>"");

КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(СКД));
КомпоновщикНастроек.ЗагрузитьНастройки(СКД.НастройкиПоУмолчанию);
"}
},
{0,
{"Индикатор в строке состояния на СКД",0,0,"","ПроцессорКомпоновки = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
ПроцессорКомпоновки.ОтображатьПроцентВывода = Истина;

ЭлементКомпоновки = Новый ЭлементРезультатаКомпоновкиДанных;

ПроцессорКомпоновки.НачатьВывод();

Для Сч = 1 По 100 Цикл
   ЭлементКомпоновки.ПроцентВывода = Сч;
   ПроцессорКомпоновки.ВывестиЭлемент(ЭлементКомпоновки);
КонецЦикла;

ПроцессорКомпоновки.ЗакончитьВывод();"}
}
},
{9,
{"Работа с файлами",1,0,"",""},
{2,
{"Текстовый файл",1,0,"",""},
{0,
{"Запись в текстовый файл",0,0,"_Тек[стовыйЗапис]ь","ТекстовыйФайл = Новый ТекстовыйДокумент;
ТекстовыйФайл.УстановитьТекст(""<?><Текст>"");
Попытка
	ТекстовыйФайл.Записать(""<ИмяФайла>"", КодировкаТекста.UTF8);	
Исключение
    //Сообщить(НСтр(""ru = '""+ОписаниеОшибки()+""'""), СтатусСообщения.Внимание);
КонецПопытки;
"}
},
{0,
{"Чтение из текстового файлa",0,0,"_Тек[стовыйЧтени]е","ТекстовыйФайл = Новый ТекстовыйДокумент;
Попытка	
	ТекстовыйФайл.Прочитать(""<?><ИмяФайла>"", КодировкаТекста.UTF8);
	
	Для НомерСтроки = 1 По ТекстовыйФайл.КоличествоСтрок() Цикл 		
		СтрокаФайла = ТекстовыйФайл.ПолучитьСтроку(НомерСтроки); 			
	КонецЦикла;
Исключение
    //Сообщить(НСтр(""ru = '""+ОписаниеОшибки()+""'""), СтатусСообщения.Внимание);
КонецПопытки;
	"}
}
},
{2,
{"Сериализация",1,0,"",""},
{0,
{"Сериализация значения",0,0,"_Сер[иализаци]я","ДокументЗаписи = Новый ТекстовыйДокумент;
Попытка	
	ДокументЗаписи.УстановитьТекст(ЗначениеВСтрокуВнутр(<?""Укажите имя объекта"">));
	ДокументЗаписи.Записать(""<?><ПолноеИмяФайла>"", КодировкаТекста.UTF8);
Исключение
	//Сообщить(НСтр(""ru = '""+ОписаниеОшибки()+""'""), СтатусСообщения.Внимание);
КонецПопытки;"}
},
{0,
{"Десериализовать значение",0,0,"_Дес[ериализоват]ь","ДокументЗаписи = Новый ТекстовыйДокумент;
Попытка	
	ДокументЗаписи.Прочитать(""<?><ПолноеИмяФайла>"", КодировкаТекста.UTF8);
	<?""Укажите имя объекта""> = ЗначениеИзСтрокиВнутр(ДокументЗаписи.ПолучитьТекст());
Исключение
	//Сообщить(НСтр(""ru = '""+ОписаниеОшибки()+""'""), СтатусСообщения.Внимание);
КонецПопытки;"}
}
},
{2,
{"XML",1,0,"",""},
{0,
{"Запись ХМL",0,0,"_Зап[исьХМ]L","ЗаписьХМL = Новый ЗаписьXML;
ЗаписьХМL.Отступ = Истина;

ЗаписьХМL.ОткрытьФайл(<?>""<ПутьКФайлу>"");
//ЗаписьXML.УстановитьСтроку(""<СтрокаXML>"");

ЗаписьХМL.ЗаписатьОбъявлениеXML();		

ЗаписьХМL.ЗаписатьНачалоЭлемента(""<КорневойЭлемент>"");		
ЗаписьХМL.ЗаписатьАтрибут(""<ИмяАтрибута>"", Строка(""""));

ЗаписьХМL.ЗаписатьНачалоЭлемента(""<ВложенныйЭлемент>"");
ЗаписьХМL.ЗаписатьАтрибут(""<ИмяАтрибута>"", Строка(""""));
ЗаписьХМL.ЗаписатьКонецЭлемента();

ЗаписьХМL.ЗаписатьКонецЭлемента(); // <КорневойЭлемент>

Попытка
	СтрокаXML = ЗаписьХМL.Закрыть();		
Исключение
	//Сообщить(НСтр(""ru = '""+ОписаниеОшибки()+""'""), СтатусСообщения.Внимание);
КонецПопытки;
"}
},
{0,
{"Чтение XML",0,0,"_Чте[ниеXM]L","ЧтениеXML = Новый ЧтениеXML;
ЧтениеXML.ОткрытьФайл(""<?><ПутьКФайлу>"");
	
// <?xml version=""1.0"" encoding=""UTF-8""?>
Если Не ЧтениеXML.Прочитать() Тогда
	ВызватьИсключение НСтр(""ru = 'Не верный формат файла!'"");
КонецЕсли; 

Пока ЧтениеXML.Прочитать() Цикл 

	Если ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда 
		
		Сообщить(НСтр(""ru = '""+ЧтениеXML.Имя+"" {'""), СтатусСообщения.Информация);

		Пока ЧтениеXML.ПрочитатьАтрибут() Цикл 

			// Прочитать данные узла атрибута. 
			ТипУзла		= ЧтениеXML.ТипУзла;
			Имя			= ЧтениеXML.Имя;
			Значение	= ЧтениеXML.Значение;
			
			Сообщить(НСтр(""ru = '   Атрибут: ""+Имя+"": ""+Значение+""'""), СтатусСообщения.Информация);
 
		КонецЦикла;

	ИначеЕсли ЧтениеXML.ТипУзла = ТипУзлаXML.Текст Тогда 

		Сообщить(НСтр(""ru = '   Текст: ""+ЧтениеXML.Значение+""'""), СтатусСообщения.Информация);

	ИначеЕсли ЧтениеXML.ТипУзла = ТипУзлаXML.КонецЭлемента Тогда 

		Сообщить(НСтр(""ru = ' }'""), СтатусСообщения.Информация);

	КонецЕсли; 

КонецЦикла;
"}
}
},
{2,
{"DBF",1,0,"",""},
{0,
{"Запись файла XBase",0,0,"_Зап[исьXBas]e","Попытка
	Файл = Новый XBase; 
	//Файл.Поля.Добавить(""CODE"", ""S"", 5); 
	Файл.СоздатьФайл(""<ПутьКБазе>"", ""<ПутьКИндексу>""); 	
	// Индекс поля
	//Файл.Индексы.Добавить(""IDXCODE"", ""CODE""); 
	//ФайлИндекса = Файл.СоздатьИндексныйФайл(""<ПутьКИндексу>""); 
	Файл.АвтоСохранение = Истина; 

	//Новая запись
	Файл.Добавить(); 
	//Файл.CODE = """"; 

	Файл.ЗакрытьФайл();
Исключение
    //Сообщить(НСтр(""ru = '""+ОписаниеОшибки()+""'""), СтатусСообщения.Внимание);
КонецПопытки;"}
},
{0,
{"Чтение файла XBase",0,0,"_Чте[ниеXBas]e","Попытка
	Файл = Новый XBase;
	Файл.ОткрытьФайл(""<ПутьКБазе>"", ""<ПутьКИндексу>"");
	// Индекс поля
	//Файл.ТекущийИндекс = Файл.Индексы.IDXCODE;

	Пока Файл.Следующая() Цикл
		//Сообщить(Файл.CODE);
	КонецЦикла;

	Файл.ЗакрытьФайл();
Исключение
    //Сообщить(НСтр(""ru = '""+ОписаниеОшибки()+""'""), СтатусСообщения.Внимание);
КонецПопытки;
"}
}
},
{2,
{"ZIP",1,0,"",""},
{0,
{"Запись Zip файла",0,0,"_Зап[исьZipФайл]а","ФайлАрхива = Новый ЗаписьZipФайла(""<ИмяФайла>"", ""<Пароль>"", ""<Комментарий>"", МетодСжатияZIP.Сжатие, УровеньСжатияZIP.Максимальный, ""<МетодШифрования>""); 
ФайлАрхива.Добавить(""<ПутьКФайлам\*.*>"", РежимСохраненияПутейZIP.СохранятьОтносительныеПути, РежимОбработкиПодкаталоговZIP.ОбрабатыватьРекурсивно);
Попытка
	ФайлАрхива.Записать();
Исключение
    //Сообщить(НСтр(""ru = '""+ОписаниеОшибки()+""'""), СтатусСообщения.Внимание);
КонецПопытки;"}
},
{0,
{"Чтение ZIP файла",0,0,"_Чте[ниеZIPФайл]а","ФайлАрхива = Новый ЧтениеZIPФайла(""<ИмяФайла>"", ""<Пароль>""); 
Попытка
	ФайлАрхива.ИзвлечьВсе(""<ПутьИзвлечения>"", РежимВосстановленияПутейФайловZIP.Восстанавливать); 
	ФайлАрхива.Закрыть();	
Исключение
    //Сообщить(НСтр(""ru = '""+ОписаниеОшибки()+""'""), СтатусСообщения.Внимание);
КонецПопытки;"}
}
},
{1,
{"XLS",1,0,"",""},
{0,
{"Чтение XLS файла",0,0,"","Если ПустаяСтрока(<?""ПутьКФайлу"">) Тогда
	Предупреждение(НСтр(""ru = 'Не указан обрабатываемый файл Microsoft Excel.'""), 30);
	Возврат;
КонецЕсли;

Попытка	 	
		
	Попытка	 	
		Состояние(НСтр(""ru = 'Загрузка Microsoft Excel ...'""));
		ExcelПриложение = Новый COMОбъект(""Excel.Application""); // Загрузка Microsoft Excel
		//ExcelПриложение.DisplayAlerts = Ложь;
	Исключение
		ВызватьИсключение ""Ошибка при загрузке приложения Microsoft Excel"";
	КонецПопытки;
	
	Попытка				
		Состояние(НСтр(""ru = 'Открытие файла Microsoft Excel ...'""));
		ExcelФайл = ExcelПриложение.WorkBooks.Open(<?""ПутьКФайлу"">); // Открытие файла Microsoft Excel
	Исключение
		ВызватьИсключение ""Ошибка открытия файла Microsoft Excel"";
	КонецПопытки;
	
	Попытка
		Состояние(НСтр(""ru = 'Обработка файла Microsoft Excel ...'""));
		ExcelЛист = ExcelФайл.Sheets(<?""НомерЛистаЕксель"">);
		
		xlCellTypeLastCell = 11;
		ExcelПоследняяСтрока = ExcelЛист.Cells.SpecialCells(xlCellTypeLastCell).Row;
		ExcelПоследняяКолонка = ExcelЛист.Cells.SpecialCells(xlCellTypeLastCell).Column;			
	Исключение
		ВызватьИсключение ""Ошибка открытия листа № <?""НомерЛистаЕксель""> Microsoft Excel."";
	КонецПопытки;
	
	// Последовательное чтение строк с выбранного листа
	Для Строка = 1 По ExcelПоследняяСтрока Цикл
		
		Состояние(""Обработка файла Microsoft Excel строка:  "" + Строка + "" из "" + ExcelПоследняяСтрока);
		
		Для Колонка = 1 По ExcelПоследняяКолонка Цикл
		
			ОбработкаПрерыванияПользователя();

			Попытка
				//ЗначениеЯцейки = ExcelЛист.Cells(Строка, Колонка).Value;
			Исключение				
				Сообщить(НСтр(""ru = 'Ошибка чтения строки файла Microsoft Excel."" + Строка + Символы.ПС + ОписаниеОшибки()+""'""), СтатусСообщения.Внимание);
				Продолжить;
			КонецПопытки;						
						
		КонецЦикла;
				
	КонецЦикла;
	
	Состояние(НСтр(""ru = ''""));
	
	ExcelПриложение.Quit(); // Закрыть COM соединение
	ExcelПриложение = Неопределено;
 
Исключение		
	
	Состояние(НСтр(""ru = ''""));
	
	ExcelПриложение.Quit(); // Закрыть COM соединение
	ExcelПриложение = Неопределено;		
	
	Сообщить(НСтр(""ru = '""+ОписаниеОшибки()+""'""), СтатусСообщения.Внимание);
	
КонецПопытки;"}
}
},
{0,
{"Диалог выбора файла/каталога",0,0,"_Ди[ало]г","<?""Имя переменной""> = Новый ДиалогВыбораФайла(<?"""", ВыборВарианта, ""Открытие"", ""РежимДиалогаВыбораФайла.Открытие"", ""Сохранение"", ""РежимДиалогаВыбораФайла.Сохранение"", ""Выбор каталога"", ""РежимДиалогаВыбораФайла.ВыборКаталога"">);
<?""Имя переменной"">.ПолноеИмяФайла = """";
//<?""Имя переменной"">.Фильтр = ""Файлы (*.txt,*.*)|*.txt;*.*"";
//<?""Имя переменной"">.МножественныйВыбор = Ложь;
//<?""Имя переменной"">.Заголовок = ""Выберите файл"";

Если Не <?""Имя переменной"">.Выбрать() Тогда
	Возврат;		
КонецЕсли;"}
},
{0,
{"Файл существует",0,0,"_Фай[лСуществуе]т","<?""Имя переменной""> = Новый Файл(<?>""<Путь>"");
Если <?""Имя переменной"">.Существует() Тогда
	
КонецЕсли; 
"}
},
{0,
{"Найти файлы",0,0,"_Най[тиФайл]ы","НайденныеФайлы  = НайтиФайлы(<?>""<Путь>"", ""<Маска>"");
Если НайденныеФайлы.Количество() > 0 Тогда
	
КонецЕсли; "}
}
},
{2,
{"Работа с формами",1,0,"",""},
{0,
{"Открыть форму",0,0,"_Отк[рытьФорм]у","<?""Введите имя формы""> = ПолучитьФорму(<?>""<Форма>"", ""<Владелец>"", ""<Ключ уникальности>"");
Если <?""Введите имя формы"">.Открыта() Тогда
	<?""Введите имя формы"">.Активизировать();
Иначе
	<?""Введите имя формы"">.Открыть();		
КонецЕсли; 
"}
},
{0,
{"Открыть форму с параметрами",0,0,"_Отк[рытьФорм]у","ПараметрыФормы = Новый Структура;
ПараметрыФормы.Вставить(""<?>"", );

<?""Введите имя формы""> = ПолучитьФорму("""", ПараметрыФормы);

Если <?""Введите имя формы"">.Открыта() Тогда
	<?""Введите имя формы"">.Активизировать();
Иначе
	<?""Введите имя формы"">.Открыть();		
КонецЕсли; 
"}
}
},
{2,
{"Отбор",1,0,"",""},
{0,
{"Установить отбор (упрощенный)",0,0,"_Отб[орУстановит]ь","<?""Имя списка"">.Отбор[""<?""Элемент отбора"">""].Установить(<?>, <?""Использование"", ВыборВарианта, ""Истина"", ""Истина"", ""Ложь"", ""Ложь"">);"}
},
{0,
{"Установить отбор",0,0,"_Отб[орУстановит]ь","<?""Имя списка"">.Отбор[""<?""Элемент отбора"">""].Использование = <?""Использование"", ВыборВарианта, ""Истина"", ""Истина"", ""Ложь"", ""Ложь"">;
<?""Имя списка"">.Отбор[""<?""Элемент отбора"">""].ВидСравнения = ВидСравнения.<?""Вид сравнения"", ВыборВарианта, ""Равно ( = )"", ""Равно"", ""Не равно ( <> )"", ""НеРавно"", ""Содержит"", ""Содержит"", ""Не содержит"", ""НеСодержит"", ""Больше ( > )"", ""Больше"", ""Больше или равно ( >= )"", ""БольшеИлиРавно"", ""Меньше ( < )"", ""Меньше"", ""Меньше или равно ( <= )"", ""МеньшеИлиРавно"", ""В иерархии"", ""ВИерархии"", ""В списке"", ""ВСписке"", ""В списке по иерархии"", ""ВСпискеПоИерархии"", ""Интервал ( > и < )"", ""Интервал"", ""Интервал включая границы ( >= и <= )"", ""ИнтервалВключаяГраницы"", ""Интервал включая начало ( >= и < )"", ""ИнтервалВключаяНачало"", ""Интервал включая окончание ( > и <= )"", ""ИнтервалВключаяОкончание"", ""Не в иерархии"", ""НеВИерархии"", ""Не в списке"", ""НеВСписке"", ""Не в списке по иерархии"", ""НеВСпискеПоИерархии"">;
<?""Имя списка"">.Отбор[""<?""Элемент отбора"">""].Значение = <?>;
//ЭлементыФормы.<""Имя элемента управления"">.НастройкаОтбора[""<?""Элемент отбора"">""].Доступность = Ложь;"}
}
},
{2,
{"Внешние обработки и отчеты",1,0,"",""},
{0,
{"Создание внешней обработки",0,0,"_Вн[ешниеОбработк]и","ВнешняяОбработка = ВнешниеОбработки.Создать(""<ПолноеИмяФайла>"");"}
},
{0,
{"Создание внешнего отчета",0,0,"_Вн[ешниеОтчет]ы","ВнешнийОтчет = ВнешниеОтчеты.Создать(""<ПолноеИмяФайла>"");"}
}
}
}
},
{6,
{"Комментарии",1,0,"",""},
{0,
{"Отладка переменной",0,0,"Отл[адк]а","// -= ОТЛАДКА ПЕРЕМЕННОЙ =-
<?>Сообщение = Новый СообщениеПользователю;
Сообщение.Текст = ""<?""Введите переменную""> = <""+?(<?""Введите переменную""> = Неопределено, ""Неопределено"", <?""Введите переменную"">)+"">"";
Сообщение.Сообщить();
"}
},
{0,
{"Закрыть коммент",0,0,"/-","///**ИЗМЕНЕНО***NG-316  <?"""", ДатаВремя, ""ДФ=dd.MM.yyyy"">  (-) }

//---- Заменено на: ----

///**ИЗМЕНЕНО***NG+316  <?"""", ДатаВремя, ""ДФ=dd.MM.yyyy""> (+) {
"}
},
{0,
{"Открыть коммент",0,1,"/+","///**ИЗМЕНЕНО***NG+316  <?"""", ДатаВремя, ""ДФ=dd.MM.yyyy""> (+) {

///**ИЗМЕНЕНО***NG-316  <?"""", ДатаВремя, ""ДФ=dd.MM.yyyy"">  (-) }"}
},
{0,
{"Вставить скобки временного кода",0,0,"/0","// -= ВРЕМЕННЫЙ КОД  =-

//_=****Изменено****=_
//{***NG+316  <?"""", ДатаВремя, ""ДФ=dd.MM.yyyy"">  (+) 
<?>
// }***NG-316  <?"""", ДатаВремя, ""ДФ=dd.MM.yyyy""> (-) 

"}
},
{0,
{"Комментарий в две строки",0,0,"/*","// <?>
//"}
},
{0,
{"Закладка",0,0,"/3","//Закладка{<?> }"}
}
},
{2,
{"Скрипты",1,0,"",""},
{0,
{"Путь к раб столу",0,0,"","	Ctrl = Новый COMОбъект(""MSScriptControl.ScriptControl"");
	Ctrl.Language = ""vbscript"";
	Ctrl.AddCode(""
	|Function SpecialFolder()
	|    Set Shell = CreateObject(""""WScript.Shell"""")
	|    SpecialFolder = Shell.RegRead(""""HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\Explorer\Shell Folders\Desktop"""")
	|End Function"");
	ПолноеИмя = Ctrl.Run(""SpecialFolder"");"}
},
{0,
{"Принтер",0,0,"","Процедура РаспечататьТабличныеДокументы(ТабличныеДокументы, ОбъектыПечати, 
		Знач ДоступнаПечатьПокомплектно, Знач КоличествоКопийКомплектов = 1) Экспорт
	
	#Если ВебКлиент Тогда
		ДоступнаПечатьПокомплектно = Ложь;
	#КонецЕсли
	
	Если ДоступнаПечатьПокомплектно Тогда
		Для НомерКопииКомплекта = 1 По КоличествоКопийКомплектов Цикл
			Для Каждого ОбъектПечати Из ОбъектыПечати Цикл
				ИмяОбласти = ОбъектПечати.Представление;
				Для Каждого Элемент Из ТабличныеДокументы Цикл
					ТабДок = Элемент.Значение;
					ОбластьПечати = ТабДок.Области.Найти(ИмяОбласти);
					Если ОбластьПечати = Неопределено Тогда
						Продолжить;
					КонецЕсли;
					ОбластьПечатиПользователя = ТабДок.ОбластьПечати;
					ТабДок.ОбластьПечати = ОбластьПечати;
					ТабДок.Напечатать(РежимИспользованияДиалогаПечати.НеИспользовать);
					ТабДок.ОбластьПечати = ОбластьПечатиПользователя;
				КонецЦикла;
			КонецЦикла;
		КонецЦикла;
	Иначе
		Для Каждого Элемент Из ТабличныеДокументы Цикл
			//+
			Если Элемент.Представление=""Этикетки складских ячеек""	 
				//добавить сюда элементы которые должны печататься только на зебре
				Тогда
				oLocator = Новый COMОбъект(""WbemScripting.SWbemLocator"");
				oService = oLocator.ConnectServer();
				ПринтерыВСистеме = oService.InstancesOf(""Win32_Printer"");
				Для Каждого Принтер Из ПринтерыВСистеме Цикл
					если Найти(Принтер.Name,""ZDesigner GT800"")=1 
						//добавить др принтеры
						тогда
						Элемент.Значение.ИмяПринтера=Принтер.Name ;
						сообщить(""Печатаю на  ""+Принтер.Name)
					конецесли;	
				КонецЦикла;	
			КонецЕсли;
			//-
			ТабДок = Элемент.Значение;
			ТабДок.Напечатать(РежимИспользованияДиалогаПечати.НеИспользовать);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры
Пр"}
}
},
{6,
{"!!!НаРазбор",1,0,"",""},
{6,
{"SZA",1,0,"",""},
{15,
{"Сокращения для встроенных функций и процедур",1,0,"",""},
{0,
{"НМ		НачалоМесяца",0,0,"НМ","НачалоМесяца(<?>)"}
},
{0,
{"КМ		КонецМесяца",0,0,"КМ","КонецМесяца(<?>)"}
},
{0,
{"НД		НачалоДня",0,0,"НД","НачалоДня(<?>)"}
},
{0,
{"КД		КонецДня",0,0,"КД","КонецДня(<?>)"}
},
{0,
{"ТД		ТекущаяДата",0,0,"ТД","ТекущаяДата()"}
},
{0,
{"ПДН		ПериодДействияНачало",0,0,"ПДН","ПериодДействияНачало<?>"}
},
{0,
{"ПДК		ПериодДействияКонец",0,0,"ПДК","ПериодДействияКонец<?>"}
},
{0,
{"БПН		БазовыйПериодНачало",0,0,"БПН","БазовыйПериодНачало<?>"}
},
{0,
{"БПК		БазовыйПериодКонец",0,0,"БПК","БазовыйПериодКонец<?>"}
},
{0,
{"цуицвета		WebЦвета",0,0,"цуицвета","WebЦвета<?>"}
},
{0,
{"ст		Состояние",0,0,"ст","Состояние(""<?""Текст строки состояния?"">"");
<?>"}
},
{0,
{"с(		Сокрлп()",0,0,"с(","СокрЛП(<?>)"}
},
{0,
{"фо		Формат",0,0,"фо","Формат(<?>, ""<?, ФорматнаяСтрока>"")"}
},
{0,
{"чп			ЧислоПрописью",0,0,"чп","ЧислоПрописью(<?>,,""рубль, рубля, рублей, м, копейка, копейки, копеек, ж, 2"")<?>"}
},
{0,
{"со      Сообщить()",0,0,"со","Сообщить(""<?""Текст сообщения?"">"",СтатусСообщения.Информация);
<?>"}
}
},
{4,
{"Формы (все для объектов форм)",1,0,"",""},
{0,
{"вс		Выделенные Строки в цикле",0,0,"вс","ВыделенныеСтроки=ЭтаФорма.ЭлементыФормы<?>.ВыделенныеСтроки;
Для Каждого ТекСтрока Из ВыделенныеСтроки Цикл
	//ТекСтрока. = ;
КонецЦикла; //по выделенным строкам"}
},
{0,
{"ОС		Оформление Строк в цикле",0,0,"ОС","Для Каждого ОформлениеСтроки ИЗ ОформленияСтрок Цикл
	ЯчейкаСтроки=ОформлениеСтроки.ячейки; 			//ЯЧЕЙКИ
	ДанныеСтроки=ОформлениеСтроки.данныестроки; 	//ДАННЫЕ СТРОКИ
	<?>//=ДанныеСтроки.;
	//ЯчейкаСтроки..ТолькоПросмотр=Истина;
	//ЯчейкаСтроки..ЦветФона		=ТутВыбранЦвет;
КонецЦикла;  //по оформлению строк
"}
},
{0,
{"эт		ЭтаФорма.ЭлементыФормы",0,0,"эт","ЭтаФорма.ЭлементыФормы<?> ;"}
},
{0,
{"тс		ТекущаяСтрока",0,0,"тс","ТекСтрока=ЭтаФорма.ЭлементыФормы<?>.ТекущаяСтрока;
//Если ЗначениеЗаполнено(ТекСтрока. ) Тогда
	//ТекСтрока. = ;
//КонецЕсли;"}
}
},
{7,
{"УсловияСравнения (собственно сами условия)",1,0,"",""},
{0,
{"з		ЗначениеЗаполнено()",0,0,"з","ЗначениеЗаполнено(<?>)"}
},
{0,
{"нз		НЕ ЗначениеЗаполнено()",0,0,"нз","НЕ ЗначениеЗаполнено(<?>)"}
},
{0,
{"=пд		Пустая Дата",0,0,"=пд","='00010101000000' <?>"}
},
{0,
{"=н		=Непределено",0,0,"=н","=Неопределено <?>"}
},
{0,
{"тз		ТипЗначения=",0,0,"тз","Если ТипЗнч(<?""Выражение для проверки типа"">) = Тип(""<?""Выберите тип"", ВыборТипа>"") Тогда
	<?>
КонецЕсли; //ТипЗнч(<?""Выражение для проверки типа"">) = Тип(""<?""Выберите тип"", ВыборТипа>"")"}
},
{0,
{"тзд		ТипЗначения Документ=",0,0,"тзд","ТипЗнч(<?>)=Тип(""ДокументСсылка.<?""Документ сравнения?"", Документ>"")"}
},
{0,
{"тзс		ТипЗначения Справочник=",0,0,"тзс","ТипЗнч(<?>)=Тип(""СправочникСсылка.<?""Справочник сравнения?"", Справочник>"")"}
}
},
{16,
{"Условия (структуры условий)",1,0,"",""},
{5,
{"Справочники определенные",1,0,"",""},
{0,
{"ко		Контрагент",0,0,"ко","Контрагент<?>"}
},
{0,
{"ор		Организация",0,0,"ор","Организация<?>"}
},
{0,
{"под		Подразделение",0,0,"под"," Подразделение<?>"}
},
{0,
{"ст		СтатьиДвиженияДенежныхСредств",0,0,"ст","СтатьиДвиженияДенежныхСредств<?>"}
},
{0,
{"фи		ФизическиеЛица",0,0,"фи","ФизическиеЛица<?>"}
}
},
{0,
{"е		ЕслиТогдаКонецЕсли",0,0,"е","Если <?> Тогда
	
КонецЕсли;"}
},
{0,
{"ен		ЕслиНе",0,0,"ен","Если НЕ <?> Тогда
	
КонецЕсли;"}
},
{0,
{"еи		ЕслиИначе",0,1,"еи","Если <?> Тогда
	
Иначе 	
КонецЕсли;"}
},
{0,
{"ени		ЕслиНеИначе",0,0,"ени","Если НЕ <?> Тогда

Иначе  
КонецЕсли;"}
},
{0,
{"ине		ИначеЕсли",0,0,"ине","ИначеЕсли 	<?>;"}
},
{0,
{"ин		Иначе",0,0,"ин","Иначе 	<?>;"}
},
{0,
{"ке		Конецесли;",0,0,"ке","	<?>
КонецЕсли;"}
},
{0,
{"то		ТогдаКонецЕсли",0,0,"то","Тогда <?> ;
КонецЕсли;"}
},
{0,
{"е1		ЕслиТогда в одну строку",0,0,"е1","Если <?> Тогда"}
},
{0,
{"ен1		ЕслиНе в одну строку",0,0,"ен1","Если НЕ <?> Тогда"}
},
{0,
{"#    #Если Клиент Тогда КонецЕсли",0,0,"#","#Если Клиент Тогда
	<?>
#КонецЕсли"}
},
{0,
{"#е    #Если Клиент Тогда",0,0,"#е","#Если Клиент Тогда
	<?>"}
},
{0,
{"#t    #Если Клиент Тогда",0,0,"#t","#Если Клиент Тогда
	<?>"}
},
{0,
{"#к    #КонецЕсли",0,0,"#к","#КонецЕсли"}
},
{0,
{"#r    #КонецЕсли",0,0,"#r","#КонецЕсли"}
}
},
{21,
{"Алгоритмы",1,0,"",""},
{5,
{"Диалоги",1,0,"",""},
{0,
{"пр		Предупреждение",0,0,"пр","Предупреждение(""<?""Текст предупреждения?"">."",<?>0,""<?""Заголовок окна предупреждения?"">!"");"}
},
{0,
{"ДВК		Диалог Выбора Каталога",0,0,"ДВК","ДиалогФыбораФайла1 = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.ВыборКаталога);
ДиалогФыбораФайла1.Заголовок				= ""<?>Выберите каталог для импорта:"";
ДиалогФыбораФайла1.МножественныйВыбор		= Ложь;
ДиалогФыбораФайла1.ПредварительныйПросмотр	= Ложь;
ДиалогФыбораФайла1.ИндексФильтра			= 0;
ДиалогФыбораФайла1.Каталог					= <?""Переменная файлового каталога?"">;
Если ДиалогФыбораФайла1.Выбрать() Тогда 
	<?""Переменная файлового каталога?"">= ДиалогФыбораФайла1.Каталог;<?>
КонецЕсли;  //когда каталог <?""Переменная файлового каталога?""> выбран
"}
},
{0,
{"ДВФ		Диалог Выбора Файла",0,0,"ДВФ","ДиалогФильтр		= ""Файл текста (*.*)|*.*"";
ДиалогРасширение	= ""*"";
ДиалогФыбораФайла1 	= Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
ДиалогФыбораФайла1.Заголовок				=	""<?>Выберите файл для импорта:"";
ДиалогФыбораФайла1.ПолноеИмяФайла			=	<?""Переменная Адреса?"">; //АДРЕС
ДиалогФыбораФайла1.Фильтр					=	ДиалогФильтр;
ДиалогФыбораФайла1.Расширение				=	ДиалогРасширение;
ДиалогФыбораФайла1.МножественныйВыбор		=	Ложь;
ДиалогФыбораФайла1.ПредварительныйПросмотр	=	Ложь;
ДиалогФыбораФайла1.ИндексФильтра			=	0;
ДиалогФыбораФайла1.ПроверятьСуществованиеФайла	=	Истина;
Если ДиалогФыбораФайла1.Выбрать() Тогда
	<?""Переменная Адреса?"">= ДиалогФыбораФайла1.ПолноеИмяФайла;<?>
КонецЕсли; //когда файл <?""Переменная Адреса?""> выбран
"}
},
{0,
{"ФВД		Форма Выбора Документа",0,0,"ФВД","//СтандартнаяОбработка=Ложь;
<?""Имя документа формы выбора?"", Документ>ФормаВыбора=Документы.<?""Имя документа формы выбора?"", Документ>.ПолучитьФормуВыбора(,<?>);
 //Если ЗначениеЗаполнено(  ) Тогда //ПОЛЕ УСЛОВИЯ
 //	<?""Имя документа формы выбора?"", Документ>ФормаВыбора.документСписок.Отбор..Использование 	= Истина;  //КОЛОНКА УСЛОВИЯ
 //	<?""Имя документа формы выбора?"", Документ>ФормаВыбора.документСписок.Отбор..ВидСравнения 	= ВидСравнения.Равно; 
 //	<?""Имя документа формы выбора?"", Документ>ФормаВыбора.документСписок.Отбор..Значение				=  ; //ЗНАЧЕНИЕ УСЛОВИЯ
 //КонецЕсли;
Если ЗначениеЗаполнено(<?""Переменная, ссылка документа?"">) Тогда
	<?""Имя документа формы выбора?"", Документ>ФормаВыбора.НачальноеЗначениеВыбора=<?""Переменная, ссылка документа?"">;
КонецЕсли;
<?""Имя документа формы выбора?"", Документ>ПолученоЗначение=<?""Имя документа формы выбора?"", Документ>ФормаВыбора.ОткрытьМодально();
Если ЗначениеЗаполнено(<?""Имя документа формы выбора?"", Документ>ПолученоЗначение) Тогда
	 <?""Переменная, ссылка документа?"">=<?""Имя документа формы выбора?"", Документ>ПолученоЗначение;
КонецЕсли;  //документ выбран
"}
},
{0,
{"ФВС		Форма Выбора Справочника",0,0,"ФВС"," //СтандартнаяОбработка=Ложь;
<?""Укажите имя справочника для формы выбора:"", Справочник>ФормаВыбора=справочники.<?""Укажите имя справочника для формы выбора:"", Справочник>.ПолучитьФормуВыбора(,<?>); //Владельца
 //Если ЗначениеЗаполнено(  ) Тогда //ПОЛЕ УСЛОВИЯ
 //	<?""Укажите имя справочника для формы выбора:"", Справочник>ФормаВыбора.СправочникСписок.Отбор..Использование	= Истина;  //КОЛОНКА УСЛОВИЯ
 //	<?""Укажите имя справочника для формы выбора:"", Справочник>ФормаВыбора.СправочникСписок.Отбор..ВидСравнения 	= ВидСравнения.Равно; 
 //	<?""Укажите имя справочника для формы выбора:"", Справочник>ФормаВыбора.СправочникСписок.Отбор..Значение		=  ; //ЗНАЧЕНИЕ УСЛОВИЯ
 //КонецЕсли;
Если ЗначениеЗаполнено(<?""Переменная ссылка справочника?"">) Тогда
	<?""Укажите имя справочника для формы выбора:"", Справочник>ФормаВыбора.НачальноеЗначениеВыбора=<?""Переменная ссылка справочника?"">;
КонецЕсли;
<?""Укажите имя справочника для формы выбора:"", Справочник>ПолученоЗначение=<?""Укажите имя справочника для формы выбора:"", Справочник>ФормаВыбора.ОткрытьМодально();
Если ЗначениеЗаполнено(<?""Укажите имя справочника для формы выбора:"", Справочник>ПолученоЗначение) Тогда
	<?""Переменная ссылка справочника?"">=<?""Укажите имя справочника для формы выбора:"", Справочник>ПолученоЗначение;
КонецЕсли;  //элемент выбран
"}
}
},
{0,
{"вы		Выборка с циклом",0,0,"вы","Выборка = <?>.Выбрать();
Пока Выборка.Следующий() Цикл

//ОбработкаПрерыванияПользователя();
КонецЦикла;  //выборка"}
},
{0,
{"зап		Запрос с Анализом",0,0,"зап","Зап<?""Укажите название запроса?"">=Новый Запрос;
Зап<?""Укажите название запроса?"">.Текст=""<?"""", ТекстЗапроса> "";
 //Если  Тогда
 // Зап<?""Укажите название запроса?"">.Текст=Зап<?""Укажите название запроса?"">.Текст+"" И  "";
 <?>//	Зап<?""Укажите название запроса?"">.УстановитьПараметр(""<?""Укажите имя параметра?"">"",<?""Укажите имя параметра?"">);
 //КонецЕсли;
Вз<?""Укажите название запроса?"">=Зап<?""Укажите название запроса?"">.Выполнить();
Если Не Вз<?""Укажите название запроса?"">.Пустой() Тогда
	Рез<?""Укажите название запроса?"">=Вз<?""Укажите название запроса?"">.Выбрать();
	Сч<?""Укажите название запроса?"">=0;
	Пока Рез<?""Укажите название запроса?"">.Следующий() Цикл
		Рез<?""Укажите имя Результата?"">=Рез<?""Укажите название запроса?"">.<?""Укажите имя Результата?"">;
		Сч<?""Укажите название запроса?"">=Сч<?""Укажите название запроса?"">+1;
		//ОбработкаПрерыванияПользователя();
	КонецЦикла;	//по результатам запроса <?""Укажите название запроса?"">
	// сообщить(""Всего: ""+Сч<?""Укажите название запроса?"">);
Иначе 	//запрос пуст!
КонецЕсли; 
"}
},
{0,
{"зап1		Запрос с анализом для одной записи",0,0,"зап1","Зап<?""Укажите название запроса?"">=Новый Запрос;
Зап<?""Укажите название запроса?"">.Текст=""<?"""", ТекстЗапроса> "";  //ВЫБРАТЬ ПЕРВЫЕ 1
 <?>//	Зап<?""Укажите название запроса?"">.УстановитьПараметр(""<?""Укажите имя параметра?"">"",<?""Укажите имя параметра?"">);
Вз<?""Укажите название запроса?"">=Зап<?""Укажите название запроса?"">.Выполнить();
Если Не Вз<?""Укажите название запроса?"">.Пустой() Тогда
	Рез<?""Укажите название запроса?"">=Вз<?""Укажите название запроса?"">.Выбрать();
	Рез<?""Укажите название запроса?"">.Следующий();
	Рез<?""Укажите имя Результата?"">=Рез<?""Укажите название запроса?"">.<?""Укажите имя Результата?"">;
	
Иначе 	//запрос пуст!
КонецЕсли;
"}
},
{0,
{"сол		СтандартнаяОбработка=ложь;",0,0,"сол","СтандартнаяОбработка=Ложь;
<?>"}
},
{0,
{"по		Попытка Исключение КонецПопытки",0,0,"по","Попытка <?>
Исключение 	//Сообщить(""Произошла ошибка: ""+ОписаниеОшибки());
			//Предупреждение(""Произошла ошибка: ""+ОписаниеОшибки(),0,""ВНИМАНИЕ!"");
КонецПопытки;"}
},
{0,
{"икп		Исключение - КонецПопытки",0,0,"икп","Исключение <?>
КонецПопытки;"}
},
{0,
{"права -Права",0,0,"права","НЕ ПолучитьСписокНабораПрав().НайтиПоЗначению(Перечисления.НаборПравПользователей.ПолныеПрава) = Неопределено"}
},
{0,
{"здбф		Запись ДБФ",0,0,"здбф","БазаДБФ<?""Имя базы ДБФ?"">=новый XBase;
БазаДБФ<?""Имя базы ДБФ?"">.поля.Добавить(""<?>FIELDNAM"",""N"",6,3); //S, ""D"",8,0
БазаДБФ<?""Имя базы ДБФ?"">.Кодировка=КодировкаXBase.OEM;
БазаДБФ<?""Имя базы ДБФ?"">.СоздатьФайл(внешнийФайл);
Пока  Цикл //УСЛОВИЕ ЗАПИСИ
	БазаДБФ<?""Имя базы ДБФ?"">.Добавить();
	//БазаДБФ<?""Имя базы ДБФ?"">.FIELDNAM = ;
	БазаДБФ<?""Имя базы ДБФ?"">.Записать();
	//ОбработкаПрерыванияПользователя();
конеццикла;  //записи <?""Имя базы ДБФ?"">
БазаДБФ<?""Имя базы ДБФ?"">.ЗакрытьФайл();
"}
},
{0,
{"чдбф		Чтение ДБФ",0,0,"чдбф","БазаДБФ<?""Имя базы ДБФ?"">=новый XBase;
БазаДБФ<?""Имя базы ДБФ?"">.ОткрытьФайл(<?>ФайлБазыДанных);
КоличествоЗаписейДБФ<?""Имя базы ДБФ?"">=БазаДБФ<?""Имя базы ДБФ?"">.КоличествоЗаписей();
Если БазаДБФ<?""Имя базы ДБФ?"">.Первая() Тогда
		Пока Истина Цикл
				// = БазаДБФ.FIELDNAM ;
				
				Если НЕ БазаДБФ<?""Имя базы ДБФ?"">.Следующая() Тогда Прервать;
				Конецесли;
				//ОбработкаПрерыванияПользователя();
		КонецЦикла; //обхода ДБФ <?""Имя базы ДБФ?"">
		//Сообщить(""Итого : ""+КоличествоЗаписейДБФ<?""Имя базы ДБФ?"">);
Иначе //База пустая
Конецесли;
БазаДБФ<?""Имя базы ДБФ?"">.ЗакрытьФайл();
"}
},
{0,
{"дз		Запись Документа",0,0,"дз","Попытка <?""Имя объекта документа?"">.Записать(РежимЗаписиДокумента.Проведение,РежимПроведенияДокумента.Неоперативный);
Исключение <?>//<?""Имя объекта документа?"">.Записать(РежимЗаписиДокумента.Запись);
	//Сообщить(""Ошибка при попытке записи документа: ""+<?""Имя объекта документа?"">+"" ""+ОписаниеОшибки());
	//Предупреждение(""Ошибка при попытке записи документа: ""+<?""Имя объекта документа?"">+"" ""+ОписаниеОшибки(),0,""Ошибка при попытке записи документа!"");
КонецПопытки;  //записи  <?""Имя объекта документа?"">"}
},
{0,
{"сз      Запись Справочника",0,0,"сз","Попытка <?""Имя объекта справочника?"">.Записать();
Исключение 	//Сообщить(""Ошибка при попытке записи эл-та справочника: ""+<?""Имя объекта справочника?"">+"" ""+ОписаниеОшибки());
			//Предупреждение(""Ошибка при попытке записи эл-та справочника: ""+<?""Имя объекта справочника?"">+"" ""+ОписаниеОшибки(),0,""Ошибка при попытке записи в справочник!"");
КонецПопытки;  //записи  <?""Имя объекта справочника?"">"}
},
{0,
{"МАК		Макет печати развернутый",0,0,"МАК","<?""Имя макета?"">ТабДок = Новый ТабличныйДокумент;
<?""Имя макета?"">Макет = ПолучитьМакет(""<?""Имя макета?"">""); //Название макета
<?""Имя макета?"">Область = <?""Имя макета?"">Макет.ПолучитьОбласть(""Ш""); //ШАПКА
 //<?""Имя макета?"">Область.Параметры. ; //ИМЯ ПАРАМЕТРА!
<?""Имя макета?"">ТабДок.Вывести(<?""Имя макета?"">Область);
<?""Имя макета?"">СчетчикСтрок=0;
пока <?> цикл //Условие вывода строк
	<?""Имя макета?"">СчетчикСтрок=<?""Имя макета?"">СчетчикСтрок+1;
	<?""Имя макета?"">Область = <?""Имя макета?"">Макет.ПолучитьОбласть(""С""); //СТРОКА
	<?""Имя макета?"">Область.Параметры. ; //ИМЯ ПАРАМЕТРА!
	 //<?""Имя макета?"">Область.Параметры. ; //ИМЯ ПАРАМЕТРА!
	<?""Имя макета?"">ТабДок.Вывести(<?""Имя макета?"">Область);
	//ОбработкаПрерыванияПользователя();
КонецЦикла; //вывод строк <?""Имя макета?"">
 //<?""Имя макета?"">Область = <?""Имя макета?"">Макет.ПолучитьОбласть(""П""); //ПОДВАЛ
 //<?""Имя макета?"">Область.Параметры. ; //ИМЯ ПАРАМЕТРА!
 //<?""Имя макета?"">ТабДок.Вывести(<?""Имя макета?"">Область);
<?""Имя макета?"">ТабДок.ОтображатьСетку = Истина;
<?""Имя макета?"">ТабДок.Защита = ИСТИНА;
<?""Имя макета?"">ТабДок.ТолькоПросмотр = Ложь;
<?""Имя макета?"">ТабДок.ОтображатьЗаголовки = Истина;
<?""Имя макета?"">ТабДок.ОтображатьГруппировки = Истина;
<?""Имя макета?"">ТабДок.Показать();
"}
},
{0,
{"рсмз		РегистрСведенийМенеджерЗаписи",0,0,"рсмз","<?""Имя Менеджера Записи регистра сведений?"">=РегистрыСведений.<?"""", РегистрСведений>.СоздатьМенеджерЗаписи();
<?""Имя Менеджера Записи регистра сведений?"">.Активность=Истина;
<?""Имя Менеджера Записи регистра сведений?""><?>  ;
//<?""Имя Менеджера Записи регистра сведений?"">   ;
<?""Имя Менеджера Записи регистра сведений?"">.Записать(Истина);
"}
},
{0,
{"тиз		ТипЗначения",0,0,"тиз","ТипЗнч(<?>)"}
},
{0,
{"дви		Движение",0,0,"дви","Движение = Движения<?>"}
},
{0,
{"УП		Установить параметр",0,0,"УП","УстановитьПараметр(""<?>"",);"}
},
{0,
{"доз   увеличение условия запроса",0,0,"доз","Если ЗначениеЗаполнено(<?""Имя хозяина условия?"">.<?""Имя параметра условия?"">) Тогда
		<?""Имя запроса?"">.Текст=<?""Имя запроса?"">.Текст+"" И <?> .<?""Имя параметра условия?""> = &<?""Имя параметра условия?"">  "";
		<?""Имя запроса?"">.УстановитьПараметр(""<?""Имя параметра условия?"">"",<?""Имя хозяина условия?"">.<?""Имя параметра условия?"">);
КонецЕсли;  //ЗначениеЗаполнено(<?""Имя хозяина условия?"">.<?""Имя параметра условия?"">)
"}
},
{0,
{"выс  Перебрать элементы справочника в цикле",0,0,"выс","<?""Название переменной выборки?"">=Справочники.<?"""", Справочник>.Выбрать(,) ;
Пока <?""Название переменной выборки?"">.Следующий() Цикл
	<?>//Если <?""Название переменной выборки?"">. =  Тогда
	//
	//КонецЕсли;
//ОбработкаПрерыванияПользователя();
КонецЦикла; //выборка <?""Название переменной выборки?"">"}
},
{0,
{"выд  Перебрать документы в цикле",0,0,"выд","<?""Название переменной выборки?"">=Документы.<?"""", Документ>.Выбрать(,) ;
Пока <?""Название переменной выборки?"">.Следующий() Цикл
	<?>//Если <?""Название переменной выборки?"">. =  Тогда
	//
	//КонецЕсли;
//ОбработкаПрерыванияПользователя();
КонецЦикла; //выборка <?""Название переменной выборки?"">"}
},
{0,
{"Динамический модуль",0,0,"","Файл = Новый Файл(""<Путь>\code.txt"");
Если Не Файл.Существует() Тогда
	Сообщить(НСтр(""ru = 'Доступ к файлу не возможен!'""), СтатусСообщения.Внимание);
	Возврат;
КонецЕсли; 

ТекстовыйФайл = Новый ТекстовыйДокумент;
ТекстовыйФайл.Прочитать(Файл.ПолноеИмя, КодировкаТекста.UTF8);
	
Попытка		
	Выполнить(ТекстовыйФайл.ПолучитьТекст()); // !!! ВЫПОЛНЯЕМ КОД ИЗ ФАЙЛА !!!
Исключение
	Сообщить(НСтр(""ru = '""+ОписаниеОшибки()+""'""), СтатусСообщения.Внимание);
КонецПопытки;"}
}
},
{2,
{"Объекты окружения (массивы, табличныедокументы и прочее)",1,0,"",""},
{0,
{"стру		Структура",0,0,"струк","<?""Имя структуры?"">Структура=Новый Структура(""<?>""); //ПЕРЕЧИСЛЕНИЕ ПОЛЕЙ
//<?""Имя структуры?"">Структура.Вставить("""", ); //ПЕРЕДАТЬ
//<?""Имя структуры?"">Структура.Свойство("""", ); //ПОЛУЧИТЬ
"}
},
{0,
{"=нт  =Новый таблицаЗначений;",0,0,"=нт","=Новый ТаблицаЗначений;"}
}
}
},
{0,
{"тес		ТекущаяСтрока",0,0,"тес","ТС=ЭтаФорма.ЭлементыФормы<?>.ТекущаяСтрока;
//Если ЗначениеЗаполнено(ТС. ) Тогда
	//ТС. = ;
//КонецЕсли;"}
},
{0,
{"НАЧАЛОПЕРИОДА",0,0,""," НАЧАЛОПЕРИОДА(&НачалоПериода, ДЕНЬ)"}
},
{0,
{"Прогресс",0,1,"прогресс","фрмПрогресс = ПолучитьОбщуюФорму(""Индикация"");
фрмПрогресс.СтрокаСостояния = ""<?>"";
	
фрмПрогресс.ЭлементыФормы.Индикатор.МаксимальноеЗначение=<?""Выборка"">.Количество();
фрмПрогресс.ЭлементыФормы.Индикатор.Шаг=<?""Количество данных"">/100;
фрмПрогресс.Открыть();

Инд = 0;
Пока <?""Выборка"">.Следующий() Цикл
	ОбработкаПрерыванияПользователя();
	Инд=Инд+1;
	фрмПрогресс.СтрокаСостояния = """" + Формат(Инд,""ЧГ=0"") + "" / "" + Формат(<?""Количество данных"">, ""ЧГ=0"");
	фрмПрогресс.ЭлементыФормы.Индикатор.Значение=Инд;
	
КонецЦикла;
фрмПрогресс.Закрыть();"}
},
{0,
{"Заполнить",0,0,"Заполнить","
Процедура Заполнить(ФормаОбъекта,ТаблицаТовары,КнопкаПанели) Экспорт
	#Если Клиент Тогда
		ДокументОбъект	= ФормаОбъекта.ДокументОбъект;
        <?>
	#КонецЕсли
//вне этой конструкции НИЧЕГО НЕ ДЕЛАЕМ
КонецПроцедуры //Заполнить"}
},
{9,
{"Узелки на память",1,0,"",""},
{0,
{"выборка",0,0,"","
    Выбрать() — метод, с помощью которого получают непосредственно выборку. Из выборки можно получить еще одну, подчиненную, выборку если указан тип обхода «по группировкам».
    Владелец() — метод, обратный Выбрать(). Позволяет получить «родительскую» выборка запроса.
    Следующий() — метод, производящий перевод курсора на следующую запись. Если запись существует возвращает Истина, если записи закончились — Ложь.
    НайтиСледующий() — очень полезный метод, с помощью которого можно выполнять перебор только нужных поле по значению отбора (отбор — структура полей).
    СледующийПоЗначениюПоля() — позволяет получить следующую запись, с отличным от текущего положения значения. Например, необходимо перебрать все записи с уникальный значением поля «Контрагент»: Выборка.СледующийПоЗначениюПоля(«Контрагент»).
    Сбросить() —  позволяет сбросить текущее расположение курсора и установить его в первоначальное положение.
    Количество()  —  возвращает количество записей в выборке.
    Получить() — с помощью метода можно можно установить курсор на нужной записи по значению индекса.
    Уровень() —  уровень в иерархии текущей записи (число).
    ТипЗаписи() — отображает тип записи — ДетальнаяЗапись, ИтогПоГруппировке, ИтогПоИерархии или ОбщийИтог
    Группировка() — возвращает имя текущей группировки, если запись не является группировкой — пустую строку.
"}
},
{0,
{"справочник или документ",0,0,"","ЭтоСправочник = Справочники.ТипВсеСсылки().СодержитТип(ТипЗнч(МояНепонятноКакаяСсылка));

аналогично:

ЭтоДокумент = Документы.ТипВсеСсылки().СодержитТип(ТипЗнч(МояНепонятноКакаяСсылка));"}
},
{0,
{"ТекстовыйДокумент",0,0,"ТекстовыйДокумент"," Текст = Новый ТекстовыйДокумент();
 Текст.ДобавитьСтроку(""bad"");
 Текст.ДобавитьСтроку(""ok""); 
 Текст.Записать(""D:\1CLog.txt"");
"}
},
{0,
{"Определение наличия роли у пользователя",0,0,"","Функция ЕстьРоль(Пользователь, ИмяРоли)
	ПользовательИБ = ПользователиИнформационнойБазы.НайтиПоИмени(СокрЛП(Пользователь.Код));
	Если НЕ ПользовательИБ = Неопределено Тогда
		РольМД = Метаданные.Роли.Найти(ИмяРоли);
		Если НЕ РольМД = Неопределено Тогда
			Возврат ПользовательИБ.Роли.Содержит(РольМД);
		Иначе
			Возврат Ложь;
		КонецЕсли;
	Иначе
		Возврат Ложь;
	КонецЕсли;
КонецФункции"}
},
{0,
{"ПОлучениеЗначенийРеквизитаОпределенногоТипаИзОбъекта",0,0,"","	СписокДоговоров = Новый СписокЗначений;
	МД = СсылкаНаОбъект.Метаданные();
	ТипДоговор = Тип(""СправочникСсылка.ДоговорыКонтрагентов"");
	// Шапка
	Для каждого Реквизит Из МД.Реквизиты Цикл
	
		Если Реквизит.Тип.СодержитТип(ТипДоговор) Тогда
			Договор = СсылкаНаОбъект[Реквизит.Имя];
			Если НЕ ЗначениеНеЗаполнено(Договор) И ТипЗнч(Договор)=ТипДоговор Тогда
			
				СписокДоговоров.Добавить(Договор)
			
			КонецЕсли;
			
		КонецЕсли;
	
	КонецЦикла;
	
	// ТабличныеЧасти
	Для каждого ТЧ Из МД.ТабличныеЧасти Цикл
		Для каждого Реквизит Из ТЧ.Реквизиты Цикл
			Если Реквизит.Тип.СодержитТип(ТипДоговор) Тогда
				
				МассивДоговоров = СсылкаНаОбъект[ТЧ.Имя].ВыгрузитьКолонку(Реквизит.Имя);
				Для каждого Договор Из МассивДоговоров Цикл
					Если НЕ ЗначениеНеЗаполнено(Договор) И ТипЗнч(Договор)=ТипДоговор Тогда
						СписокДоговоров.Добавить(Договор)
					КонецЕсли;
				КонецЦикла;
			
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
"}
},
{0,
{"строка<->массив",0,0,"","Функция СтрокаМассив(Знач Значение,Разделитель)
	Если ТипЗнч(Значение)=Тип(""Строка"") Тогда
		МнСтр=СтрЗаменить(Значение,Разделитель,Символы.ПС);
		Массив=Новый Массив;
		Для н=1 По СтрЧислоСтрок(МнСтр) Цикл
			Массив.Добавить(СтрПолучитьСтроку(МнСтр,н));
		КонецЦикла;
		Возврат Массив;
	ИначеЕсли ТипЗнч(Значение)=Тип(""Массив"") Тогда
		Строка="""";
		Для Каждого Элемент Из Значение Цикл
			Строка=Строка+?(Строка<>"""",Разделитель,"""")+Элемент;
		КонецЦикла;
		Возврат Строка;
	Иначе
		Возврат Неопределено;	
	КонецЕсли;
КонецФункции
"}
},
{0,
{"Правильная индикация прогресс-бара (с минимальными обращениями к графической подсистеме)",0,0,"","КоличествоЭлементов<?""Элемент коллекции""> = <?""Индексированная коллекция"">.Количество();
Для Каждого <?""Элемент коллекции""> Из <?""Индексированная коллекция""> Цикл
	ОбработкаПрерыванияПользователя();
	НоваяДоля = <?""Индексированная коллекция"">.Индекс(<?""Элемент коллекции"">) / КоличествоЭлементов<?""Элемент коллекции""> * 100;
	Если Цел(НоваяДоля) <> Цел(НоваяДоля - 100 / КоличествоЭлементов<?""Элемент коллекции"">) Тогда
		Состояние(""Выполнено "" + Формат(НоваяДоля, ""ЧЦ=3; ЧДЦ=0"") + ""%"");
	КонецЕсли;
	<?>
КонецЦикла;"}
},
{0,
{"Установка субконто при подписке на событие ПриЗаписи РБ",0,0,"","Процедура КорректировкаНабораЗаписейХозрасчетный(Источник, Отказ, РежимЗаписи) Экспорт
	ЗаписатьПовторно = Ложь;
	Если Источник.Количество()>0 И Источник.ОбменДанными.Загрузка = Ложь Тогда
		Для каждого Запись Из Источник Цикл
			Если ЗначениеЗаполнено(Запись.Регистратор) Тогда
				Регистратор = Запись.Регистратор;
				МД = Регистратор.Метаданные();
				Если НЕ  МД.Реквизиты.Найти(""ПодразделениеОрганизации"") = Неопределено Тогда
					Если Запись.СчетДт.ПринадлежитЭлементу(ПланыСчетов.Хозрасчетный.ОсновныеСредства)=Истина И (НЕ Запись.СчетДт.ВидыСубконто.Найти(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Подразделения,""ВидСубконто"") = Неопределено) Тогда
						Запись.СубконтоДт.Подразделения = Регистратор.ПодразделениеОрганизации;
					    ЗаписатьПовторно = Истина;
					ИначеЕсли Запись.СчетКт.ПринадлежитЭлементу(ПланыСчетов.Хозрасчетный.ОсновныеСредства)=Истина И (НЕ Запись.СчетКт.ВидыСубконто.Найти(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Подразделения,""ВидСубконто"") = Неопределено) Тогда
						Запись.СубконтоКт.Подразделения = Регистратор.ПодразделениеОрганизации;
						ЗаписатьПовторно = Истина;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	Если ЗаписатьПовторно Тогда
	
		Источник.ОбменДанными.Загрузка = Истина;
		Источник.Записать();
	
	КонецЕсли;
КонецПроцедуры"}
},
{0,
{"Разбор списка ИБ",0,0,"","НазваниеБазы = """";
Попытка
			   
   //Определям текущего пользователя Windows
   Network = Новый ComОбъект(""WScript.Network"");
   ИмяПользователяWindows = Network.UserName;
			   
   //Имя каталога, где лежит файл с информацией о последних базах
   ИмяКаталога = ""C:\Documents and Settings\"" + ИмяПользователяWindows + ""\Application Data"";
   ИмяКаталога1С = ИмяКаталога + ""\1C\1Cv8\"";
			   
   //Имя Файла
   ИмяФайла = ИмяКаталога1С + ""v8ib.lst"";
			   
   //Читаем файл
   Текст = Новый ТекстовыйДокумент();
   Текст.Прочитать(ИмяФайла);
			   
   ЧтоИщем = ""Connect="" + СтрокаСоединенияИнформационнойБазы();
			   
   Для й = 1 По Текст.КоличествоСтрок() Цикл
				   
	   Строка = Текст.ПолучитьСтроку(й);
	   Если Строка = ЧтоИщем Тогда
		   НазваниеБазы = Сред(НазваниеБазы, 2, СтрДлина(НазваниеБазы) - 2);
		   Прервать;
	   КонецЕсли;
	   НазваниеБазы = Строка;
   КонецЦикла;
Исключение
			   
КонецПопытки;"}
}
}
}
}
}